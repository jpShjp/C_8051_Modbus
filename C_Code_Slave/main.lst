RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  1

QCW(0x00002F32)

DOS RC51 COMPILER V03.08.10.309, COMPILATION OF MODULE MAIN      
OBJECT MODULE PLACED IN F:\Reinier\Estudio\TESIS\PROTEUS\Cap03\C_Code_Slave\main
            -.obj
COMPILER INVOKED BY: QUIET GENERATEDEPFILE OJ(F:\Reinier\Estudio\TESIS\PROTEUS\C
            -ap03\C_Code_Slave\main.obj) PIN(C:\Program Files (x86)\Raisonance\R
            -ide\Inc;C:\Program Files (x86)\Raisonance\Ride\Inc\51) PIN(C:\Progr
            -am Files (x86)\Raisonance\Ride\\inc\51) NOAM CD PR(F:\Reinier\Estud
            -io\TESIS\PROTEUS\Cap03\C_Code_Slave\main.lst) FP(NOFLOAT) IP NOIS U
            -NSIGNEDCHAR ET(CHAR) PR PL(60) PW(80) OE(1) OT(7,SPEED) RB(0) MAXER
            -R(25) MAXWAR(25) SM MOD517(NODP8,NOAU) 

stmt level    source
   1          #include <stdio.h>
   2          #include <main.h>
   3          #include <modbus.h>

*** WARNING C191 IN LINE 34 OF slave.h : Inconsistent comparison with 'unsigned
            -'

*** WARNING C191 IN LINE 47 OF slave.h : Inconsistent comparison with 'unsigned
            -'

*** WARNING C191 IN LINE 78 OF slave.h : Inconsistent comparison with 'unsigned
            -'

*** WARNING C191 IN LINE 90 OF slave.h : Inconsistent comparison with 'unsigned
            -'

*** WARNING C191 IN LINE 90 OF slave.h : Inconsistent comparison with 'unsigned
            -'

*** WARNING C191 IN LINE 104 OF slave.h : Inconsistent comparison with 'unsigne
            -d'

*** WARNING C191 IN LINE 116 OF slave.h : Inconsistent comparison with 'unsigne
            -d'
   4          #include <reg52.h>
   5          
   6          #define MMOD 1009
   7          
   8          int level = 0;
   9          int cant = 1;
  10          int led_count = 0;
  11          int sec_count = 0;
  12          
  13          int last_data_count = 0;
  14          int last_hash       = 0;
  15          
  16          uint8 idata _7seg[10] = {0x7E,0x42,0xEC,0xE6,0xD2,0xB6,0x9E,0x62,0
            -xFE,0xF2};
  17          
  18          sbit LED1 = P1^3;
  19          sbit EN_D = P3^7;
  20          sbit ONE  = P2^0;
  21          uint8 BUSY = 0;
  22          
  23          void Serial_PWM_Init()
  24          { 
  25   1          RS485En = 0;
  26   1      
  27   1          TMOD = 0x21;    // 
  28   1      
  29   1          TH1 = TIMER_HIGHT_1;
  30   1          TL1 = TIMER_LOW_1;  //2400 BAUDS
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 35

  31   1      
  32   1          TH0 = TIMER_HIGHT_0;  // 2 ms
  33   1          TL0 = TIMER_LOW_0;
  34   1      
  35   1          SetHoldingRegisterValue(1, 1);  // level 5 full bright
  36   1          level = 5;
  37   1         
  38   1          ET0 = 1;
  39   1          TR0 = 1;
  40   1      
  41   1          SCON = 0x50;    //mode 1 8 bits 1 start, 8 data, 1 stop 
  42   1          
  43   1          ES = 1;
  44   1          PS = 1;
  45   1          PT1 = 1;
  46   1      
  47   1          TR1 = 1; 
  48   1      }
  49          
  50          int make_hash() 
  51          {
  52   1          int i, h = 0;
  53   1          for ( i = 0; i < data_count; i++ ) {
  54   2              h += (char)ascii_frame[i] * ( i + 1 );
  55   2          }
  56   1          return ( 19 * h ) % MMOD;
  57   1      }
  58          
  59          void delay_ms(unsigned int d)
  60          {
  61   1          int k = 0;
  62   1          int s = 0;
  63   1          for ( k = 0; k < d; k++ )
  64   1          {     
  65   2              s++;
  66   2          }
  67   1      }
  68          
  69          void PWM() interrupt 1
  70          {
  71   1          int curr = 0;
  72   1          int off = GetCoilValue(0);
  73   1          
  74   1          TH0 = TIMER_HIGHT_0;  
  75   1          TL0 = TIMER_LOW_0;
  76   1          
  77   1          if ( cant <= 0 )
  78   1          {
  79   2              EN_D = DISPLAY_OFF;
  80   2          }
  81   1          else
  82   1          {         
  83   2              EN_D = !(DISPLAY_ON ^ off);
  84   2          }           
  85   1          
  86   1          if ( cant >= level )
  87   1          {     
  88   2              cant = level - 5;
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 38

  89   2          }
  90   1          
  91   1          cant++;
  92   1      
  93   1          led_count++;
  94   1          if (led_count == 500)   // 1 second
  95   1          {
  96   2              led_count = 0;
  97   2              LED1 = ~LED1;         
  98   2              
  99   2            /*  curr = make_hash();
 100   2          
 101   2              if ( last_hash == curr )
 102   2              {
 103   2                  clear_frame();
 104   2                  last_hash = curr = 0;        
 105   2              }
 106   2              last_hash = curr;        */        
 107   2          }
 108   1      
 109   1          TF0 = 0;   
 110   1          TR0 = 1;
 111   1      }

*** WARNING C233 IN LINE 111 OF F:\Reinier\Estudio\TESIS\PROTEUS\Cap03\C_Code_S
            -lave\main.c : using absolute registers together with interrupts can
            - cause register corruptions (mixup of register banks)

*** WARNING C092 IN LINE 71 OF F:\Reinier\Estudio\TESIS\PROTEUS\Cap03\C_Code_Sl
            -ave\main.c : 'curr' is declared but not used

*** WARNING C020 IN LINE 71 OF F:\Reinier\Estudio\TESIS\PROTEUS\Cap03\C_Code_Sl
            -ave\main.c : 'curr' is assigned a value that is never used
 112          
 113          void SerialPortInt() interrupt 4
 114          {
 115   1          uint8 rx = 0;
 116   1      
 117   1          if( TI == 1 )
 118   1          {       
 119   2              TI = 0;
 120   2              if ( RS485En == 0 ) 
 121   2              {            
 122   3                  return;
 123   3              }
 124   2                  
 125   2              if ( send_count < data_count )
 126   2              {                       
 127   3                  TB8 = 0;                    
 128   3                  SBUF = ascii_frame[send_count];        
 129   3                  send_count++;
 130   3              }
 131   2              else
 132   2              {                      
 133   3                  RS485En = 0;    //rx
 134   3                  clear_frame();
 135   3              }
 136   2      
 137   2          }
 138   1          else                 
 139   1          if( RI == 1 )
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 41

 140   1          {
 141   2      	
 142   2              if ( RS485En == 0 && BUSY == 1 )	// rx and not busy
 143   2              {           
 144   3                  rx = SBUF;             
 145   3                  RI = 0;
 146   3                  if ( rx == 0 ) return;  //discard bad characters
 147   3                      
 148   3                  if ( data_count == 0 )
 149   3                  {             
 150   4                      if ( rx == ':' )    // new frame
 151   4                      {                                  
 152   5                          ascii_frame[data_count++] = rx;    
 153   5                      }            
 154   4                  }
 155   3                  else  
 156   3                  {
 157   4                      ascii_frame[data_count++] = rx;     
 158   4      
 159   4                      if ( data_count >= 9 )
 160   4                      {                    
 161   5                          if ( (ascii_frame[data_count-1] == LF) && (asc
            -ii_frame[data_count-2] == CR) )
 162   5                          {                            
 163   6                              BUSY = 0;   // device busy = true
 164   6      
 165   6                              execute_modbus_command();
 166   6                          
 167   6                              BUSY = 1;   // device busy = false
 168   6                          }
 169   5                      }                      
 170   4                      if ( data_count == ASCII_FRAME_SIZE )   // bad fra
            -me size
 171   4                      {                
 172   5                          clear_frame();             
 173   5                      }                                                 
            -      
 174   4                  }
 175   3              }
 176   2              else
 177   2                  RI = 0;
 178   2          }
 179   1      }
 180          
 181          void update_display()
 182          {    
 183   1          int x = (int)GetHoldingRegisterValue(0); // number            
            - 
 184   1          int L = (int)GetHoldingRegisterValue(1); // bright
 185   1      
 186   1          if ( x >= 0 && x <= 9 )
 187   1          {       
 188   2              P2 = _7seg[x]; 
 189   2              ONE = 0;    //off 1
 190   2          }      
 191   1          else
 192   1          {
 193   2              if ( x < 20 )
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 45

 194   2              {            
 195   3                  x = x % 10;
 196   3                  P2 = _7seg[x]; 
 197   3                  ONE = 1;                    
 198   3              }   
 199   2          }
 200   1        
 201   1          if ( L >= 0 && L <= 5 )
 202   1              level = L;
 203   1      }
 204          
 205          void main(void)
 206          {        
 207   1          Serial_PWM_Init(); 
 208   1          
 209   1          SetCoilValue(0,1);        
 210   1          SetHoldingRegisterValue(0,1);      
 211   1      
 212   1          EN_D = DISPLAY_OFF;
 213   1          LED1 = 1;
 214   1          RS485En = 0;
 215   1          BUSY = 1;
 216   1      
 217   1          clear_frame();
 218   1      
 219   1          EA = 1;    
 220   1         
 221   1          while (1)
 222   1          {                     
 223   2              update_display();
 224   2              delay_ms(1000);
 225   2          }    
 226   1      }
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 48

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION _GetCoilValue (BEGIN)
              ; Register R6R7 is assigned to parameter adr
              ; R3 is assigned to res
              ; R2 is assigned to i
                                           ; SOURCE LINE # 33 
0000 750000  R      MOV    d,#000H
                                           ; SOURCE LINE # 34 
0003 BE0003         CJNE   R6,#000H,?LAB12
0006 BF0800         CJNE   R7,#008H,?LAB12
0009         ?LAB12:
0009 4003           JC     ?NXT1
                                           ; SOURCE LINE # 36 
000B E4             CLR    A
000C FF             MOV    R7,A
                                           ; SOURCE LINE # 42 
000D 22             RET    
000E         ?NXT1:
                                           ; SOURCE LINE # 38 
000E 8F03           MOV    AR3,R7
0010 8E02           MOV    AR2,R6
0012 EA             MOV    A,R2
0013 75F003         MOV    B,#003H
0016         ?LAB15:
0016 C3             CLR    C
0017 13             RRC    A
0018 CB             XCH    A,R3
0019 13             RRC    A
001A CB             XCH    A,R3
001B D5F0F8         DJNZ   B,?LAB15
001E 8B00    R      MOV    i,R3
              ; R3 is assigned to d
                                           ; SOURCE LINE # 39 
0020 EF             MOV    A,R7
0021 5407           ANL    A,#007H
                                           ; SOURCE LINE # 40 
0023 FA             MOV    R2,A
              ; R7 is assigned to res
0024 7401           MOV    A,#001H
0026 0A             INC    R2
0027 8002           SJMP   ?LAB16
0029         ?LAB17:
0029 C3             CLR    C
002A 33             RLC    A
002B         ?LAB16:
002B DAFC           DJNZ   R2,?LAB17
002D FE             MOV    R6,A
002E E500    R      MOV    A,i
0030 2400    R      ADD    A,#coils_array
0032 F8             MOV    R0,A
0033 EE             MOV    A,R6
0034 56             ANL    A,@R0
                                           ; SOURCE LINE # 41 
0035 B40001         CJNE   A,#000H,?LAB19
0038 D3             SETB   C
0039         ?LAB19:
0039 E4             CLR    A
003A 4001           JC     ?LAB18
003C 04             INC    A
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  2

003D         ?LAB18:
003D FF             MOV    R7,A
                                           ; SOURCE LINE # 42 
003E 22             RET    

            ; FUNCTION _GetCoilValue (END)

            ; FUNCTION _SetCoilValue (BEGIN)
                                           ; SOURCE LINE # 44 
0000 8E00    R      MOV    adr,R6
0002 8F00    R      MOV    adr+01H,R7
              ; Register R5 is assigned to parameter value
              ; R4 is assigned to res
              ; R3 is assigned to i
              ; R2 is assigned to d
                                           ; SOURCE LINE # 47 
0004 E500    R      MOV    A,adr
0006 B40005         CJNE   A,#000H,?LAB43
0009 E500    R      MOV    A,adr+01H
000B B40800         CJNE   A,#008H,?LAB43
000E         ?LAB43:
000E 4001           JC     ?NXT8
                                           ; SOURCE LINE # 73 
0010 22             RET    
0011         ?NXT8:
              ; R4 is assigned to i
                                           ; SOURCE LINE # 51 
0011 AB00    R      MOV    R3,adr+01H
0013 75F003         MOV    B,#003H
0016 E500    R      MOV    A,adr
0018         ?LAB46:
0018 C3             CLR    C
0019 13             RRC    A
001A CB             XCH    A,R3
001B 13             RRC    A
001C CB             XCH    A,R3
001D D5F0F8         DJNZ   B,?LAB46
0020 8B04           MOV    AR4,R3
              ; R7 is assigned to d
                                           ; SOURCE LINE # 52 
0022 E500    R      MOV    A,adr+01H
0024 5407           ANL    A,#007H
0026 FF             MOV    R7,A
              ; R6 is assigned to res
                                           ; SOURCE LINE # 53 
0027 FA             MOV    R2,A
0028 0A             INC    R2
0029 7401           MOV    A,#001H
002B 8002           SJMP   ?LAB47
002D         ?LAB48:
002D C3             CLR    C
002E 33             RLC    A
002F         ?LAB47:
002F DAFC           DJNZ   R2,?LAB48
0031 FE             MOV    R6,A
0032 EC             MOV    A,R4
0033 2400    R      ADD    A,#coils_array
0035 F8             MOV    R0,A
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  3

0036 EE             MOV    A,R6
0037 56             ANL    A,@R0
                                           ; SOURCE LINE # 54 
0038 B40001         CJNE   A,#000H,?LAB49
003B D3             SETB   C
003C         ?LAB49:
003C 4004           JC     ?ELSE9
                                           ; SOURCE LINE # 56 
003E 7E01           MOV    R6,#001H
0040 8002           SJMP   ?NXT9
0042         ?ELSE9:
                                           ; SOURCE LINE # 60 
0042 E4             CLR    A
0043 FE             MOV    R6,A
0044         ?NXT9:
                                           ; SOURCE LINE # 62 
0044 BE0105         CJNE   R6,#001H,?NXT10
0047 ED             MOV    A,R5
0048 B40101         CJNE   A,#001H,?NXT10
                                           ; SOURCE LINE # 73 
004B 22             RET    
004C         ?NXT10:
                                           ; SOURCE LINE # 63 
004C EE             MOV    A,R6
004D 7004           JNZ    ?NXT11
004F ED             MOV    A,R5
0050 7001           JNZ    ?NXT11
                                           ; SOURCE LINE # 73 
0052 22             RET    
0053         ?NXT11:
                                           ; SOURCE LINE # 64 
0053 EE             MOV    A,R6
0054 7017           JNZ    ?NXT12
0056 ED             MOV    A,R5
0057 B40113         CJNE   A,#001H,?NXT12
                                           ; SOURCE LINE # 66 
005A EC             MOV    A,R4
005B 2400    R      ADD    A,#coils_array
005D F8             MOV    R0,A
005E 7401           MOV    A,#001H
0060 8F03           MOV    AR3,R7
0062 0B             INC    R3
0063 8002           SJMP   ?LAB56
0065         ?LAB57:
0065 C3             CLR    C
0066 33             RLC    A
0067         ?LAB56:
0067 DBFC           DJNZ   R3,?LAB57
0069 FA             MOV    R2,A
006A E6             MOV    A,@R0
006B 4A             ORL    A,R2
006C F6             MOV    @R0,A
006D         ?NXT12:
                                           ; SOURCE LINE # 68 
006D EE             MOV    A,R6
006E B40117         CJNE   A,#001H,?NXT13
0071 ED             MOV    A,R5
0072 7014           JNZ    ?NXT13
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  4

                                           ; SOURCE LINE # 70 
0074 EC             MOV    A,R4
0075 2400    R      ADD    A,#coils_array
0077 F8             MOV    R0,A
0078 7401           MOV    A,#001H
007A 8F03           MOV    AR3,R7
007C 0B             INC    R3
007D 8002           SJMP   ?LAB59
007F         ?LAB60:
007F C3             CLR    C
0080 33             RLC    A
0081         ?LAB59:
0081 DBFC           DJNZ   R3,?LAB60
0083 F4             CPL    A
0084 FA             MOV    R2,A
0085 E6             MOV    A,@R0
0086 5A             ANL    A,R2
0087 F6             MOV    @R0,A
0088         ?NXT13:
                                           ; SOURCE LINE # 73 
0088 22             RET    

            ; FUNCTION _SetCoilValue (END)

            ; FUNCTION _GetHoldingRegisterValue (BEGIN)
              ; Register R6R7 is assigned to parameter adr
                                           ; SOURCE LINE # 78 
0000 BE0003         CJNE   R6,#000H,?LAB68
0003 BF0200         CJNE   R7,#002H,?LAB68
0006         ?LAB68:
0006 4004           JC     ?ELSE15
                                           ; SOURCE LINE # 80 
0008 E4             CLR    A
0009 FE             MOV    R6,A
000A FF             MOV    R7,A
                                           ; SOURCE LINE # 86 
000B 22             RET    
000C         ?ELSE15:
                                           ; SOURCE LINE # 84 
000C EF             MOV    A,R7
000D 2F             ADD    A,R7
000E 2400    R      ADD    A,#holding_registers_array
0010 F8             MOV    R0,A
0011 8606           MOV    AR6,@R0
0013 08             INC    R0
0014 8607           MOV    AR7,@R0
                                           ; SOURCE LINE # 86 
0016 22             RET    

            ; FUNCTION _GetHoldingRegisterValue (END)

            ; FUNCTION _SetHoldingRegisterValue (BEGIN)
                                           ; SOURCE LINE # 88 
0000 8E00    R      MOV    adr,R6
0002 8F00    R      MOV    adr+01H,R7
0004 8C00    R      MOV    value,R4
0006 8D00    R      MOV    value+01H,R5
                                           ; SOURCE LINE # 90 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  5

0008 E500    R      MOV    A,adr
000A B40005         CJNE   A,#000H,?LAB82
000D E500    R      MOV    A,adr+01H
000F B40200         CJNE   A,#002H,?LAB82
0012         ?LAB82:
0012 5015           JNC    ?LAB79
0014 E4             CLR    A
0015 C0E0           PUSH   ACC
0017 C0E0           PUSH   ACC
0019 C000    R      PUSH   value
001B C000    R      PUSH   value+01H
001D FC             MOV    R4,A
001E FD             MOV    R5,A
001F 74FF           MOV    A,#0FFH
0021 FE             MOV    R6,A
0022 FF             MOV    R7,A
0023 120000  R      LCALL  ?C_CMPLS
0026 BF0101         CJNE   R7,#001H,?ELSE17
0029         ?LAB79:
                                           ; SOURCE LINE # 98 
0029 22             RET    
002A         ?ELSE17:
                                           ; SOURCE LINE # 96 
002A E500    R      MOV    A,adr+01H
002C 2500    R      ADD    A,adr+01H
002E 2400    R      ADD    A,#holding_registers_array
0030 F8             MOV    R0,A
0031 A600    R      MOV    @R0,value
0033 08             INC    R0
0034 A600    R      MOV    @R0,value+01H
                                           ; SOURCE LINE # 98 
0036 22             RET    

            ; FUNCTION _SetHoldingRegisterValue (END)

            ; FUNCTION _GetInputValue (BEGIN)
              ; Register R6R7 is assigned to parameter adr
              ; R3 is assigned to res
              ; R2 is assigned to i
                                           ; SOURCE LINE # 103 
0000 750000  R      MOV    d,#000H
                                           ; SOURCE LINE # 104 
0003 BE0003         CJNE   R6,#000H,?LAB98
0006 BF0800         CJNE   R7,#008H,?LAB98
0009         ?LAB98:
0009 4003           JC     ?NXT19
                                           ; SOURCE LINE # 106 
000B E4             CLR    A
000C FF             MOV    R7,A
                                           ; SOURCE LINE # 112 
000D 22             RET    
000E         ?NXT19:
                                           ; SOURCE LINE # 108 
000E 8F03           MOV    AR3,R7
0010 8E02           MOV    AR2,R6
0012 EA             MOV    A,R2
0013 75F003         MOV    B,#003H
0016         ?LAB101:
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  6

0016 C3             CLR    C
0017 13             RRC    A
0018 CB             XCH    A,R3
0019 13             RRC    A
001A CB             XCH    A,R3
001B D5F0F8         DJNZ   B,?LAB101
001E 8B00    R      MOV    i,R3
              ; R3 is assigned to d
                                           ; SOURCE LINE # 109 
0020 EF             MOV    A,R7
0021 5407           ANL    A,#007H
                                           ; SOURCE LINE # 110 
0023 FA             MOV    R2,A
              ; R7 is assigned to res
0024 7401           MOV    A,#001H
0026 0A             INC    R2
0027 8002           SJMP   ?LAB102
0029         ?LAB103:
0029 C3             CLR    C
002A 33             RLC    A
002B         ?LAB102:
002B DAFC           DJNZ   R2,?LAB103
002D FE             MOV    R6,A
002E E500    R      MOV    A,i
0030 2400    R      ADD    A,#inputs_array
0032 F8             MOV    R0,A
0033 EE             MOV    A,R6
0034 56             ANL    A,@R0
                                           ; SOURCE LINE # 111 
0035 B40001         CJNE   A,#000H,?LAB105
0038 D3             SETB   C
0039         ?LAB105:
0039 E4             CLR    A
003A 4001           JC     ?LAB104
003C 04             INC    A
003D         ?LAB104:
003D FF             MOV    R7,A
                                           ; SOURCE LINE # 112 
003E 22             RET    

            ; FUNCTION _GetInputValue (END)

            ; FUNCTION _GetInputRegisterValue (BEGIN)
              ; Register R6R7 is assigned to parameter adr
                                           ; SOURCE LINE # 116 
0000 BE0003         CJNE   R6,#000H,?LAB114
0003 BF0200         CJNE   R7,#002H,?LAB114
0006         ?LAB114:
0006 4004           JC     ?ELSE21
                                           ; SOURCE LINE # 118 
0008 E4             CLR    A
0009 FE             MOV    R6,A
000A FF             MOV    R7,A
                                           ; SOURCE LINE # 124 
000B 22             RET    
000C         ?ELSE21:
                                           ; SOURCE LINE # 122 
000C EF             MOV    A,R7
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  7

000D 2F             ADD    A,R7
000E 2400    R      ADD    A,#inputs_registers_array
0010 F8             MOV    R0,A
0011 8606           MOV    AR6,@R0
0013 08             INC    R0
0014 8607           MOV    AR7,@R0
                                           ; SOURCE LINE # 124 
0016 22             RET    

            ; FUNCTION _GetInputRegisterValue (END)

            ; FUNCTION _ByteToAscii (BEGIN)
              ; Register R7 is assigned to parameter val
              ; R6 is assigned to a
              ; R5 is assigned to b
                                           ; SOURCE LINE # 20 
0000 75F010         MOV    B,#010H
0003 EF             MOV    A,R7
0004 84             DIV    AB
0005 FE             MOV    R6,A
                                           ; SOURCE LINE # 21 
0006 EF             MOV    A,R7
0007 540F           ANL    A,#00FH
0009 FD             MOV    R5,A
                                           ; SOURCE LINE # 22 
000A BE0901         CJNE   R6,#009H,?LAB123
000D D3             SETB   C
000E         ?LAB123:
000E 5007           JNC    ?ELSE24
                                           ; SOURCE LINE # 24 
0010 EE             MOV    A,R6
0011 2430           ADD    A,#030H
0013 F500    R      MOV    ascii,A
0015 8005           SJMP   ?NXT24
0017         ?ELSE24:
                                           ; SOURCE LINE # 28 
0017 EE             MOV    A,R6
0018 2437           ADD    A,#037H
001A F500    R      MOV    ascii,A
001C         ?NXT24:
                                           ; SOURCE LINE # 30 
001C ED             MOV    A,R5
001D B40901         CJNE   A,#009H,?LAB125
0020 D3             SETB   C
0021         ?LAB125:
0021 5006           JNC    ?ELSE25
                                           ; SOURCE LINE # 32 
0023 ED             MOV    A,R5
0024 2430           ADD    A,#030H
0026 F500    R      MOV    ascii+01H,A
0028 22             RET    
0029         ?ELSE25:
                                           ; SOURCE LINE # 36 
0029 ED             MOV    A,R5
002A 2437           ADD    A,#037H
002C F500    R      MOV    ascii+01H,A
                                           ; SOURCE LINE # 39 
002E 22             RET    
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  8


            ; FUNCTION _ByteToAscii (END)

            ; FUNCTION _NibbleToAscii (BEGIN)
              ; Register R7 is assigned to parameter val
                                           ; SOURCE LINE # 43 
0000 BF0901         CJNE   R7,#009H,?LAB132
0003 D3             SETB   C
0004         ?LAB132:
0004 5005           JNC    ?ELSE27
                                           ; SOURCE LINE # 45 
0006 EF             MOV    A,R7
0007 2430           ADD    A,#030H
0009 FF             MOV    R7,A
                                           ; SOURCE LINE # 51 
000A 22             RET    
000B         ?ELSE27:
                                           ; SOURCE LINE # 49 
000B EF             MOV    A,R7
000C 2437           ADD    A,#037H
000E FF             MOV    R7,A
                                           ; SOURCE LINE # 51 
000F 22             RET    

            ; FUNCTION _NibbleToAscii (END)

            ; FUNCTION _AsciiToByte (BEGIN)
              ; Register R7 is assigned to parameter a
              ; Register R5 is assigned to parameter b
                                           ; SOURCE LINE # 55 
0000 BF4100         CJNE   R7,#041H,?LAB141
0003         ?LAB141:
0003 4006           JC     ?ELSE30
                                           ; SOURCE LINE # 57 
0005 EF             MOV    A,R7
0006 24C9           ADD    A,#0C9H
0008 FF             MOV    R7,A
0009 8004           SJMP   ?NXT30
000B         ?ELSE30:
                                           ; SOURCE LINE # 61 
000B EF             MOV    A,R7
000C 24D0           ADD    A,#0D0H
000E FF             MOV    R7,A
000F         ?NXT30:
                                           ; SOURCE LINE # 63 
000F ED             MOV    A,R5
0010 B44100         CJNE   A,#041H,?LAB143
0013         ?LAB143:
0013 4006           JC     ?ELSE31
                                           ; SOURCE LINE # 65 
0015 ED             MOV    A,R5
0016 24C9           ADD    A,#0C9H
0018 FD             MOV    R5,A
0019 8004           SJMP   ?NXT31
001B         ?ELSE31:
                                           ; SOURCE LINE # 69 
001B ED             MOV    A,R5
001C 24D0           ADD    A,#0D0H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE  9

001E FD             MOV    R5,A
001F         ?NXT31:
                                           ; SOURCE LINE # 71 
001F EF             MOV    A,R7
0020 75F010         MOV    B,#010H
0023 A4             MUL    AB
0024 2D             ADD    A,R5
0025 FF             MOV    R7,A
                                           ; SOURCE LINE # 72 
0026 22             RET    

            ; FUNCTION _AsciiToByte (END)

            ; FUNCTION _TwoByteToAscii (BEGIN)
              ; Register R6R7 is assigned to parameter val
              ; R4R5 is assigned to i
                                           ; SOURCE LINE # 77 
0000 7804           MOV    R0,#004H
0002 7900    R      MOV    R1,#hexa
0004 E4             CLR    A
0005         ?NXT38:
0005 F7             MOV    @R1,A
0006 09             INC    R1
0007 D8FC           DJNZ   R0,?NXT38
              ; R4R5 is assigned to i
                                           ; SOURCE LINE # 79 
0009 E4             CLR    A
000A FC             MOV    R4,A
000B FD             MOV    R5,A
000C         ?WHILE1:
                                           ; SOURCE LINE # 80 
000C BE0004         CJNE   R6,#000H,?LAB153
000F BF0001         CJNE   R7,#000H,?LAB153
0012 D3             SETB   C
0013         ?LAB153:
0013 4022           JC     ?NXT39
                                           ; SOURCE LINE # 82 
0015 EF             MOV    A,R7
0016 540F           ANL    A,#00FH
0018 FA             MOV    R2,A
0019 ED             MOV    A,R5
001A 2400    R      ADD    A,#hexa
001C F8             MOV    R0,A
001D A602           MOV    @R0,AR2
                                           ; SOURCE LINE # 83 
001F 8F03           MOV    AR3,R7
0021 EE             MOV    A,R6
0022 75F004         MOV    B,#004H
0025         ?LAB155:
0025 C3             CLR    C
0026 13             RRC    A
0027 CB             XCH    A,R3
0028 13             RRC    A
0029 CB             XCH    A,R3
002A D5F0F8         DJNZ   B,?LAB155
002D FE             MOV    R6,A
002E 8B07           MOV    AR7,R3
                                           ; SOURCE LINE # 84 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 10

0030 0D             INC    R5
0031 ED             MOV    A,R5
0032 70D8           JNZ    ?WHILE1
0034 0C             INC    R4
0035 80D5           SJMP   ?WHILE1
0037         ?NXT39:
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 86 
0037 E4             CLR    A
0038 FB             MOV    R3,A
0039         ?FOR3:
                                           ; SOURCE LINE # 87 
0039 EB             MOV    A,R3
003A 2400    R      ADD    A,#hexa
003C F8             MOV    R0,A
003D 8607           MOV    AR7,@R0
003F 120000  R      LCALL  _NibbleToAscii
0042 EB             MOV    A,R3
0043 2400    R      ADD    A,#ascii
0045 F8             MOV    R0,A
0046 A607           MOV    @R0,AR7
                                           ; SOURCE LINE # 86 
0048 0B             INC    R3
0049 BB04ED         CJNE   R3,#004H,?FOR3
                                           ; SOURCE LINE # 89 
004C 22             RET    

            ; FUNCTION _TwoByteToAscii (END)

            ; FUNCTION AsciiToTwoByte (BEGIN)
              ; R2R3 is assigned to a
                                           ; SOURCE LINE # 93 
0000 AF00    R      MOV    R7,ascii
0002 AD00    R      MOV    R5,ascii+01H
0004 120000  R      LCALL  _AsciiToByte
0007 8F03           MOV    AR3,R7
                                           ; SOURCE LINE # 94 
0009 AF00    R      MOV    R7,ascii+02H
000B AD00    R      MOV    R5,ascii+03H
000D 120000  R      LCALL  _AsciiToByte
0010 750000  R      MOV    b,#000H
0013 8F00    R      MOV    b+01H,R7
                                           ; SOURCE LINE # 95 
0015 E4             CLR    A
0016 2500    R      ADD    A,b+01H
0018 F500    R      MOV    result+01H,A
001A EB             MOV    A,R3
001B 3500    R      ADDC   A,b
001D F500    R      MOV    result,A
                                           ; SOURCE LINE # 96 
001F AE00    R      MOV    R6,result
0021 AF00    R      MOV    R7,result+01H
                                           ; SOURCE LINE # 97 
0023 22             RET    

            ; FUNCTION AsciiToTwoByte (END)

            ; FUNCTION execute_modbus_command (BEGIN)
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 11

                                           ; SOURCE LINE # 35 
0000 750000  R      MOV    is_me,#000H
0003 750000  R      MOV    fun,#000H
0006 750000  R      MOV    lrc,#000H
                                           ; SOURCE LINE # 36 
0009 7900    R      MOV    R1,#data_count
000B B70900         CJNE   @R1,#009H,?LAB171
000E         ?LAB171:
000E 5003           JNC    ?NXT47
                                           ; SOURCE LINE # 38 
0010 020000  R      LJMP   clear_frame
0013         ?NXT47:
                                           ; SOURCE LINE # 41 
0013 7900    R      MOV    R1,#data_count
0015 E7             MOV    A,@R1
0016 24FE           ADD    A,#0FEH
0018 F7             MOV    @R1,A
                                           ; SOURCE LINE # 42 
0019 FE             MOV    R6,A
001A 2400    R      ADD    A,#ascii_frame+0FEH
001C F8             MOV    R0,A
001D 8607           MOV    AR7,@R0
001F EE             MOV    A,R6
0020 2400    R      ADD    A,#ascii_frame+0FFH
0022 F8             MOV    R0,A
0023 8605           MOV    AR5,@R0
0025 120000  R      LCALL  _AsciiToByte
0028 8F00    R      MOV    lrc,R7
                                           ; SOURCE LINE # 43 
002A E7             MOV    A,@R1
002B 24FE           ADD    A,#0FEH
002D F7             MOV    @R1,A
                                           ; SOURCE LINE # 44 
002E 120000  R      LCALL  lrc_calc
                                           ; SOURCE LINE # 45 
0031 EF             MOV    A,R7
                                           ; SOURCE LINE # 44 
0032 8F00    R      MOV    fun,R7
                                           ; SOURCE LINE # 45 
0034 6500    R      XRL    A,lrc
0036 6003           JZ     ?NXT48
                                           ; SOURCE LINE # 47 
0038 020000  R      LJMP   clear_frame
003B         ?NXT48:
                                           ; SOURCE LINE # 52 
003B 7900    R      MOV    R1,#ascii_frame+01H
003D 8707           MOV    AR7,@R1
003F 7900    R      MOV    R1,#ascii_frame+02H
0041 8705           MOV    AR5,@R1
0043 120000  R      LCALL  _AsciiToByte
                                           ; SOURCE LINE # 53 
0046 EF             MOV    A,R7
                                           ; SOURCE LINE # 52 
0047 8F00    R      MOV    is_me,R7
                                           ; SOURCE LINE # 53 
0049 7004           JNZ    ?ELSE38
                                           ; SOURCE LINE # 55 
004B D200    R      SETB   broadcast
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 12

004D 800B           SJMP   ?NXT49
004F         ?ELSE38:
                                           ; SOURCE LINE # 59 
004F C200    R      CLR    broadcast
                                           ; SOURCE LINE # 60 
0051 E500    R      MOV    A,is_me
0053 6405           XRL    A,#005H
0055 6003           JZ     ?NXT49
                                           ; SOURCE LINE # 62 
0057 020000  R      LJMP   clear_frame
005A         ?NXT49:
                                           ; SOURCE LINE # 67 
005A 7900    R      MOV    R1,#ascii_frame+03H
005C 8707           MOV    AR7,@R1
005E 7900    R      MOV    R1,#ascii_frame+04H
0060 8705           MOV    AR5,@R1
0062 120000  R      LCALL  _AsciiToByte
0065 8F00    R      MOV    fun,R7
                                           ; SOURCE LINE # 68 
0067 BF0502         CJNE   R7,#005H,?LAB180
006A 802D           SJMP   ?CASE12
006C         ?LAB180:
006C 5010           JNC    ?LAB179
006E E500    R      MOV    A,fun
0070 14             DEC    A
0071 601A           JZ     ?CASE8
0073 14             DEC    A
0074 601A           JZ     ?CASE9
0076 14             DEC    A
0077 601A           JZ     ?CASE10
0079 14             DEC    A
007A 601A           JZ     ?CASE11
007C 8027           SJMP   ?DEFAULT1
007E         ?LAB179:
007E E500    R      MOV    A,fun
0080 24FA           ADD    A,#0FAH
0082 6018           JZ     ?CASE13
0084 24F7           ADD    A,#0F7H
0086 6017           JZ     ?CASE14
0088 14             DEC    A
0089 6017           JZ     ?CASE15
008B 8018           SJMP   ?DEFAULT1
008D         ?CASE8:
                                           ; SOURCE LINE # 72 
008D 020000  R      LJMP   ResponseReadCoilsStatus_01
0090         ?CASE9:
                                           ; SOURCE LINE # 77 
0090 020000  R      LJMP   ResponseReadInputStatus_02
0093         ?CASE10:
                                           ; SOURCE LINE # 82 
0093 020000  R      LJMP   ResponseReadHoldingRegisters_03
0096         ?CASE11:
                                           ; SOURCE LINE # 87 
0096 020000  R      LJMP   ResponseReadInputRegisters_04
0099         ?CASE12:
                                           ; SOURCE LINE # 92 
0099 020000  R      LJMP   ResponseForceSingleCoil_05
009C         ?CASE13:
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 13

                                           ; SOURCE LINE # 97 
009C 020000  R      LJMP   ResponsePresetSingleRegister_06
009F         ?CASE14:
                                           ; SOURCE LINE # 102 
009F 020000  R      LJMP   ResponseForceMultipleCoils_15
00A2         ?CASE15:
                                           ; SOURCE LINE # 107 
00A2 020000  R      LJMP   ResponsePresetMultipleRegisters_16
00A5         ?DEFAULT1:

00A5         ?NXT51:
                                           ; SOURCE LINE # 115 
00A5 22             RET    

            ; FUNCTION execute_modbus_command (END)

            ; FUNCTION gen_lrc (BEGIN)
                                           ; SOURCE LINE # 119 
0000 120000  R      LCALL  lrc_calc
0003 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 120 
0006 7900    R      MOV    R1,#data_count
0008 E7             MOV    A,@R1
0009 07             INC    @R1
000A 2400    R      ADD    A,#ascii_frame
000C F8             MOV    R0,A
000D A600    R      MOV    @R0,ascii
                                           ; SOURCE LINE # 121 
000F E7             MOV    A,@R1
0010 07             INC    @R1
0011 2400    R      ADD    A,#ascii_frame
0013 F8             MOV    R0,A
0014 A600    R      MOV    @R0,ascii+01H
                                           ; SOURCE LINE # 123 
0016 E7             MOV    A,@R1
0017 07             INC    @R1
0018 2400    R      ADD    A,#ascii_frame
001A F8             MOV    R0,A
001B 760D           MOV    @R0,#00DH
                                           ; SOURCE LINE # 124 
001D E7             MOV    A,@R1
001E 07             INC    @R1
001F 2400    R      ADD    A,#ascii_frame
0021 F8             MOV    R0,A
0022 760A           MOV    @R0,#00AH
                                           ; SOURCE LINE # 125 
0024 22             RET    

            ; FUNCTION gen_lrc (END)

            ; FUNCTION clear_frame (BEGIN)
              ; R7 is assigned to i
                                           ; SOURCE LINE # 129 
0000 7900    R      MOV    R1,#data_count
0002 7700           MOV    @R1,#000H
                                           ; SOURCE LINE # 130 
0004 7900    R      MOV    R1,#send_count
0006 7700           MOV    @R1,#000H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 14

                                           ; SOURCE LINE # 131 
0008 7E3C           MOV    R6,#03CH
000A 7900    R      MOV    R1,#ascii_frame
000C E4             CLR    A
000D         ?NXT55:
000D F7             MOV    @R1,A
000E 09             INC    R1
000F DEFC           DJNZ   R6,?NXT55
                                           ; SOURCE LINE # 135 
0011 22             RET    

            ; FUNCTION clear_frame (END)

            ; FUNCTION tx_assci_frame (BEGIN)
                                           ; SOURCE LINE # 138 
0000 300007  R      JNB    broadcast,?NXT57
                                           ; SOURCE LINE # 140 
0003 C2B2           CLR    RS485En
                                           ; SOURCE LINE # 141 
0005 C200    R      CLR    broadcast
                                           ; SOURCE LINE # 142 
0007 020000  R      LJMP   clear_frame
000A         ?NXT57:
                                           ; SOURCE LINE # 146 
000A D2B2           SETB   RS485En
                                           ; SOURCE LINE # 147 
000C 7900    R      MOV    R1,#send_count
000E 7701           MOV    @R1,#001H
                                           ; SOURCE LINE # 148 
0010 C299           CLR    TI
                                           ; SOURCE LINE # 149 
0012 C29B           CLR    TB8
                                           ; SOURCE LINE # 150 
0014 7900    R      MOV    R1,#ascii_frame
0016 8799           MOV    SBUF,@R1
                                           ; SOURCE LINE # 151 
0018 22             RET    

            ; FUNCTION tx_assci_frame (END)

            ; FUNCTION lrc_calc (BEGIN)
              ; R6 is assigned to result
              ; R4 is assigned to i
                                           ; SOURCE LINE # 154 
0000 7E00           MOV    R6,#000H
                                           ; SOURCE LINE # 155 
0002 750001  R      MOV    i,#001H
0005         ?FOR7:
0005 7900    R      MOV    R1,#data_count
0007 87F0           MOV    B,@R1
0009 E500    R      MOV    A,i
000B B5F000         CJNE   A,B,?LAB193
000E         ?LAB193:
000E 501A           JNC    ?NXT60
                                           ; SOURCE LINE # 157 
0010 E500    R      MOV    A,i
0012 2400    R      ADD    A,#ascii_frame
0014 F8             MOV    R0,A
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 15

0015 8607           MOV    AR7,@R0
0017 E500    R      MOV    A,i
0019 2400    R      ADD    A,#ascii_frame+01H
001B F8             MOV    R0,A
001C 8605           MOV    AR5,@R0
001E 120000  R      LCALL  _AsciiToByte
0021 EE             MOV    A,R6
0022 2F             ADD    A,R7
0023 FE             MOV    R6,A
                                           ; SOURCE LINE # 155 
0024 0500    R      INC    i
0026 0500    R      INC    i
0028 80DB           SJMP   ?FOR7
002A         ?NXT60:
                                           ; SOURCE LINE # 159 
002A EE             MOV    A,R6
002B F4             CPL    A
                                           ; SOURCE LINE # 160 
002C 04             INC    A
002D FF             MOV    R7,A
                                           ; SOURCE LINE # 161 
002E 22             RET    

            ; FUNCTION lrc_calc (END)

            ; FUNCTION ResponseReadCoilsStatus_01 (BEGIN)
              ; R2R3 is assigned to start
              ; R4R5 is assigned to cant
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 167 
0000 E4             CLR    A
0001 F500    R      MOV    limit,A
0003 F500    R      MOV    limit+01H,A
                                           ; SOURCE LINE # 168 
0005 F500    R      MOV    coils,A
0007 F500    R      MOV    k,A
0009 F500    R      MOV    new_data_count,A
                                           ; SOURCE LINE # 169 
000B 7900    R      MOV    R1,#data_count
000D 7707           MOV    @R1,#007H
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 170 
000F FB             MOV    R3,A
0010         ?FOR11:
                                           ; SOURCE LINE # 172 
0010 EB             MOV    A,R3
0011 2400    R      ADD    A,#ascii_frame+05H
0013 F8             MOV    R0,A
0014 EB             MOV    A,R3
0015 2400    R      ADD    A,#ascii
0017 F9             MOV    R1,A
0018 E6             MOV    A,@R0
0019 F7             MOV    @R1,A
                                           ; SOURCE LINE # 170 
001A 0B             INC    R3
001B BB04F2         CJNE   R3,#004H,?FOR11
                                           ; SOURCE LINE # 174 
001E 120000  R      LCALL  AsciiToTwoByte
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 16

0021 8E00    R      MOV    start,R6
0023 8F00    R      MOV    start+01H,R7
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 175 
0025 E4             CLR    A
0026 FB             MOV    R3,A
0027         ?FOR12:
                                           ; SOURCE LINE # 177 
0027 EB             MOV    A,R3
0028 2400    R      ADD    A,#ascii_frame+09H
002A F8             MOV    R0,A
002B EB             MOV    A,R3
002C 2400    R      ADD    A,#ascii
002E F9             MOV    R1,A
002F E6             MOV    A,@R0
0030 F7             MOV    @R1,A
                                           ; SOURCE LINE # 175 
0031 0B             INC    R3
0032 BB04F2         CJNE   R3,#004H,?FOR12
                                           ; SOURCE LINE # 179 
0035 120000  R      LCALL  AsciiToTwoByte
0038 8E00    R      MOV    cant,R6
003A 8F00    R      MOV    cant+01H,R7
                                           ; SOURCE LINE # 180 
003C EF             MOV    A,R7
003D 2500    R      ADD    A,start+01H
003F F500    R      MOV    limit+01H,A
0041 E500    R      MOV    A,cant
0043 3500    R      ADDC   A,start
0045 F500    R      MOV    limit,A
                                           ; SOURCE LINE # 183 
0047 850000  R      MOV    i,start
004A 850000  R      MOV    i+01H,start+01H
004D         ?FOR13:
004D E500    R      MOV    A,i
004F B50005  R      CJNE   A,limit,?LAB210
0052 E500    R      MOV    A,i+01H
0054 B50000  R      CJNE   A,limit+01H,?LAB210
0057         ?LAB210:
0057 5063           JNC    ?NXT74
                                           ; SOURCE LINE # 185 
0059 E4             CLR    A
005A F500    R      MOV    k,A
                                           ; SOURCE LINE # 186 
005C F500    R      MOV    coils,A
005E         ?WHILE3:
                                           ; SOURCE LINE # 187 
005E E500    R      MOV    A,k
0060 B40800         CJNE   A,#008H,?LAB213
0063         ?LAB213:
0063 5033           JNC    ?NXT76
0065 E500    R      MOV    A,i+01H
0067 2500    R      ADD    A,k
0069 FE             MOV    R6,A
006A E4             CLR    A
006B 3500    R      ADDC   A,i
006D B50004  R      CJNE   A,limit,?LAB215
0070 EE             MOV    A,R6
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 17

0071 B50000  R      CJNE   A,limit+01H,?LAB215
0074         ?LAB215:
0074 5022           JNC    ?NXT76
                                           ; SOURCE LINE # 189 
0076 E500    R      MOV    A,i+01H
0078 2500    R      ADD    A,k
007A FF             MOV    R7,A
007B E4             CLR    A
007C 3500    R      ADDC   A,i
007E FE             MOV    R6,A
007F 120000  R      LCALL  _GetCoilValue
0082 8F00    R      MOV    val,R7
                                           ; SOURCE LINE # 190 
0084 BF010D         CJNE   R7,#001H,?NXT77
                                           ; SOURCE LINE # 192 
0087 7401           MOV    A,#001H
0089 AB00    R      MOV    R3,k
008B 0B             INC    R3
008C 8002           SJMP   ?LAB217
008E         ?LAB218:
008E C3             CLR    C
008F 33             RLC    A
0090         ?LAB217:
0090 DBFC           DJNZ   R3,?LAB218
0092 4200    R      ORL    coils,A
0094         ?NXT77:
                                           ; SOURCE LINE # 194 
0094 0500    R      INC    k
0096 80C6           SJMP   ?WHILE3
0098         ?NXT76:
                                           ; SOURCE LINE # 196 
0098 AF00    R      MOV    R7,coils
009A 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 197 
009D 7900    R      MOV    R1,#data_count
009F E7             MOV    A,@R1
00A0 07             INC    @R1
00A1 2400    R      ADD    A,#ascii_frame
00A3 F8             MOV    R0,A
00A4 A600    R      MOV    @R0,ascii
                                           ; SOURCE LINE # 198 
00A6 E7             MOV    A,@R1
00A7 07             INC    @R1
00A8 2400    R      ADD    A,#ascii_frame
00AA F8             MOV    R0,A
00AB A600    R      MOV    @R0,ascii+01H
                                           ; SOURCE LINE # 199 
00AD 0500    R      INC    new_data_count
                                           ; SOURCE LINE # 183 
00AF E500    R      MOV    A,i+01H
00B1 2408           ADD    A,#008H
00B3 F500    R      MOV    i+01H,A
00B5 E4             CLR    A
00B6 3500    R      ADDC   A,i
00B8 F500    R      MOV    i,A
00BA 8091           SJMP   ?FOR13
00BC         ?NXT74:
                                           ; SOURCE LINE # 202 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 18

00BC AF00    R      MOV    R7,new_data_count
00BE 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 203 
00C1 7900    R      MOV    R1,#ascii_frame+05H
00C3 A700    R      MOV    @R1,ascii
                                           ; SOURCE LINE # 204 
00C5 7900    R      MOV    R1,#ascii_frame+06H
00C7 A700    R      MOV    @R1,ascii+01H
                                           ; SOURCE LINE # 206 
00C9 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 208 
00CC 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponseReadCoilsStatus_01 (END)

            ; FUNCTION ResponseReadInputStatus_02 (BEGIN)
              ; R2R3 is assigned to start
              ; R4R5 is assigned to cant
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 214 
0000 E4             CLR    A
0001 F500    R      MOV    limit,A
0003 F500    R      MOV    limit+01H,A
                                           ; SOURCE LINE # 215 
0005 F500    R      MOV    inputs,A
0007 F500    R      MOV    k,A
0009 F500    R      MOV    new_data_count,A
                                           ; SOURCE LINE # 216 
000B 7900    R      MOV    R1,#data_count
000D 7707           MOV    @R1,#007H
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 217 
000F FB             MOV    R3,A
0010         ?FOR17:
                                           ; SOURCE LINE # 219 
0010 EB             MOV    A,R3
0011 2400    R      ADD    A,#ascii_frame+05H
0013 F8             MOV    R0,A
0014 EB             MOV    A,R3
0015 2400    R      ADD    A,#ascii
0017 F9             MOV    R1,A
0018 E6             MOV    A,@R0
0019 F7             MOV    @R1,A
                                           ; SOURCE LINE # 217 
001A 0B             INC    R3
001B BB04F2         CJNE   R3,#004H,?FOR17
                                           ; SOURCE LINE # 221 
001E 120000  R      LCALL  AsciiToTwoByte
0021 8E00    R      MOV    start,R6
0023 8F00    R      MOV    start+01H,R7
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 222 
0025 E4             CLR    A
0026 FB             MOV    R3,A
0027         ?FOR18:
                                           ; SOURCE LINE # 224 
0027 EB             MOV    A,R3
0028 2400    R      ADD    A,#ascii_frame+09H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 19

002A F8             MOV    R0,A
002B EB             MOV    A,R3
002C 2400    R      ADD    A,#ascii
002E F9             MOV    R1,A
002F E6             MOV    A,@R0
0030 F7             MOV    @R1,A
                                           ; SOURCE LINE # 222 
0031 0B             INC    R3
0032 BB04F2         CJNE   R3,#004H,?FOR18
                                           ; SOURCE LINE # 227 
0035 120000  R      LCALL  AsciiToTwoByte
0038 8E00    R      MOV    cant,R6
003A 8F00    R      MOV    cant+01H,R7
                                           ; SOURCE LINE # 228 
003C EF             MOV    A,R7
003D 2500    R      ADD    A,start+01H
003F F500    R      MOV    limit+01H,A
0041 E500    R      MOV    A,cant
0043 3500    R      ADDC   A,start
0045 F500    R      MOV    limit,A
                                           ; SOURCE LINE # 231 
0047 850000  R      MOV    i,start
004A 850000  R      MOV    i+01H,start+01H
004D         ?FOR19:
004D E500    R      MOV    A,i
004F B50005  R      CJNE   A,limit,?LAB234
0052 E500    R      MOV    A,i+01H
0054 B50000  R      CJNE   A,limit+01H,?LAB234
0057         ?LAB234:
0057 5063           JNC    ?NXT90
                                           ; SOURCE LINE # 233 
0059 E4             CLR    A
005A F500    R      MOV    k,A
                                           ; SOURCE LINE # 234 
005C F500    R      MOV    inputs,A
005E         ?WHILE5:
                                           ; SOURCE LINE # 235 
005E E500    R      MOV    A,k
0060 B40800         CJNE   A,#008H,?LAB237
0063         ?LAB237:
0063 5033           JNC    ?NXT92
0065 E500    R      MOV    A,i+01H
0067 2500    R      ADD    A,k
0069 FE             MOV    R6,A
006A E4             CLR    A
006B 3500    R      ADDC   A,i
006D B50004  R      CJNE   A,limit,?LAB239
0070 EE             MOV    A,R6
0071 B50000  R      CJNE   A,limit+01H,?LAB239
0074         ?LAB239:
0074 5022           JNC    ?NXT92
                                           ; SOURCE LINE # 237 
0076 E500    R      MOV    A,i+01H
0078 2500    R      ADD    A,k
007A FF             MOV    R7,A
007B E4             CLR    A
007C 3500    R      ADDC   A,i
007E FE             MOV    R6,A
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 20

007F 120000  R      LCALL  _GetInputValue
0082 8F00    R      MOV    val,R7
                                           ; SOURCE LINE # 238 
0084 BF010D         CJNE   R7,#001H,?NXT93
                                           ; SOURCE LINE # 240 
0087 7401           MOV    A,#001H
0089 AB00    R      MOV    R3,k
008B 0B             INC    R3
008C 8002           SJMP   ?LAB241
008E         ?LAB242:
008E C3             CLR    C
008F 33             RLC    A
0090         ?LAB241:
0090 DBFC           DJNZ   R3,?LAB242
0092 4200    R      ORL    inputs,A
0094         ?NXT93:
                                           ; SOURCE LINE # 242 
0094 0500    R      INC    k
0096 80C6           SJMP   ?WHILE5
0098         ?NXT92:
                                           ; SOURCE LINE # 244 
0098 AF00    R      MOV    R7,inputs
009A 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 245 
009D 7900    R      MOV    R1,#data_count
009F E7             MOV    A,@R1
00A0 07             INC    @R1
00A1 2400    R      ADD    A,#ascii_frame
00A3 F8             MOV    R0,A
00A4 A600    R      MOV    @R0,ascii
                                           ; SOURCE LINE # 246 
00A6 E7             MOV    A,@R1
00A7 07             INC    @R1
00A8 2400    R      ADD    A,#ascii_frame
00AA F8             MOV    R0,A
00AB A600    R      MOV    @R0,ascii+01H
                                           ; SOURCE LINE # 248 
00AD 0500    R      INC    new_data_count
                                           ; SOURCE LINE # 231 
00AF E500    R      MOV    A,i+01H
00B1 2408           ADD    A,#008H
00B3 F500    R      MOV    i+01H,A
00B5 E4             CLR    A
00B6 3500    R      ADDC   A,i
00B8 F500    R      MOV    i,A
00BA 8091           SJMP   ?FOR19
00BC         ?NXT90:
                                           ; SOURCE LINE # 251 
00BC AF00    R      MOV    R7,new_data_count
00BE 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 252 
00C1 7900    R      MOV    R1,#ascii_frame+05H
00C3 A700    R      MOV    @R1,ascii
                                           ; SOURCE LINE # 253 
00C5 7900    R      MOV    R1,#ascii_frame+06H
00C7 A700    R      MOV    @R1,ascii+01H
                                           ; SOURCE LINE # 255 
00C9 120000  R      LCALL  gen_lrc
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 21

                                           ; SOURCE LINE # 257 
00CC 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponseReadInputStatus_02 (END)

            ; FUNCTION ResponseReadHoldingRegisters_03 (BEGIN)
              ; R2R3 is assigned to start
              ; R4R5 is assigned to cant
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 263 
0000 E4             CLR    A
0001 F500    R      MOV    limit,A
0003 F500    R      MOV    limit+01H,A
0005 F500    R      MOV    status,A
0007 F500    R      MOV    status+01H,A
                                           ; SOURCE LINE # 264 
0009 F500    R      MOV    new_data_count,A
                                           ; SOURCE LINE # 265 
000B 7900    R      MOV    R1,#data_count
000D 7707           MOV    @R1,#007H
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 266 
000F FB             MOV    R3,A
0010         ?FOR23:
                                           ; SOURCE LINE # 268 
0010 EB             MOV    A,R3
0011 2400    R      ADD    A,#ascii_frame+05H
0013 F8             MOV    R0,A
0014 EB             MOV    A,R3
0015 2400    R      ADD    A,#ascii
0017 F9             MOV    R1,A
0018 E6             MOV    A,@R0
0019 F7             MOV    @R1,A
                                           ; SOURCE LINE # 266 
001A 0B             INC    R3
001B BB04F2         CJNE   R3,#004H,?FOR23
                                           ; SOURCE LINE # 270 
001E 120000  R      LCALL  AsciiToTwoByte
0021 8E00    R      MOV    start,R6
0023 8F00    R      MOV    start+01H,R7
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 271 
0025 E4             CLR    A
0026 FB             MOV    R3,A
0027         ?FOR24:
                                           ; SOURCE LINE # 273 
0027 EB             MOV    A,R3
0028 2400    R      ADD    A,#ascii_frame+09H
002A F8             MOV    R0,A
002B EB             MOV    A,R3
002C 2400    R      ADD    A,#ascii
002E F9             MOV    R1,A
002F E6             MOV    A,@R0
0030 F7             MOV    @R1,A
                                           ; SOURCE LINE # 271 
0031 0B             INC    R3
0032 BB04F2         CJNE   R3,#004H,?FOR24
                                           ; SOURCE LINE # 275 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 22

0035 120000  R      LCALL  AsciiToTwoByte
0038 8E00    R      MOV    cant,R6
003A 8F00    R      MOV    cant+01H,R7
                                           ; SOURCE LINE # 276 
003C EF             MOV    A,R7
003D 2500    R      ADD    A,start+01H
003F F500    R      MOV    limit+01H,A
0041 E500    R      MOV    A,cant
0043 3500    R      ADDC   A,start
0045 F500    R      MOV    limit,A
                                           ; SOURCE LINE # 279 
0047 850000  R      MOV    i,start
004A 850000  R      MOV    i+01H,start+01H
004D         ?FOR25:
004D E500    R      MOV    A,i
004F B50005  R      CJNE   A,limit,?LAB252
0052 E500    R      MOV    A,i+01H
0054 B50000  R      CJNE   A,limit+01H,?LAB252
0057         ?LAB252:
0057 503E           JNC    ?NXT104
                                           ; SOURCE LINE # 281 
0059 AE00    R      MOV    R6,i
005B AF00    R      MOV    R7,i+01H
005D 120000  R      LCALL  _GetHoldingRegisterValue
0060 8E00    R      MOV    status,R6
0062 8F00    R      MOV    status+01H,R7
                                           ; SOURCE LINE # 282 
0064 AE00    R      MOV    R6,status
0066 AF00    R      MOV    R7,status+01H
0068 120000  R      LCALL  _TwoByteToAscii
                                           ; SOURCE LINE # 284 
006B 7900    R      MOV    R1,#data_count
006D E7             MOV    A,@R1
006E 07             INC    @R1
006F 2400    R      ADD    A,#ascii_frame
0071 F8             MOV    R0,A
0072 A600    R      MOV    @R0,ascii+03H
                                           ; SOURCE LINE # 285 
0074 E7             MOV    A,@R1
0075 07             INC    @R1
0076 2400    R      ADD    A,#ascii_frame
0078 F8             MOV    R0,A
0079 A600    R      MOV    @R0,ascii+02H
                                           ; SOURCE LINE # 286 
007B E7             MOV    A,@R1
007C 07             INC    @R1
007D 2400    R      ADD    A,#ascii_frame
007F F8             MOV    R0,A
0080 A600    R      MOV    @R0,ascii+01H
                                           ; SOURCE LINE # 287 
0082 E7             MOV    A,@R1
0083 07             INC    @R1
0084 2400    R      ADD    A,#ascii_frame
0086 F8             MOV    R0,A
0087 A600    R      MOV    @R0,ascii
                                           ; SOURCE LINE # 289 
0089 0500    R      INC    new_data_count
008B 0500    R      INC    new_data_count
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 23

                                           ; SOURCE LINE # 279 
008D 0500    R      INC    i+01H
008F E500    R      MOV    A,i+01H
0091 70BA           JNZ    ?FOR25
0093 0500    R      INC    i
0095 80B6           SJMP   ?FOR25
0097         ?NXT104:
                                           ; SOURCE LINE # 292 
0097 AF00    R      MOV    R7,new_data_count
0099 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 293 
009C 7900    R      MOV    R1,#ascii_frame+05H
009E A700    R      MOV    @R1,ascii
                                           ; SOURCE LINE # 294 
00A0 7900    R      MOV    R1,#ascii_frame+06H
00A2 A700    R      MOV    @R1,ascii+01H
                                           ; SOURCE LINE # 296 
00A4 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 298 
00A7 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponseReadHoldingRegisters_03 (END)

            ; FUNCTION ResponseReadInputRegisters_04 (BEGIN)
              ; R2R3 is assigned to start
              ; R4R5 is assigned to cant
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 304 
0000 E4             CLR    A
0001 F500    R      MOV    limit,A
0003 F500    R      MOV    limit+01H,A
0005 F500    R      MOV    status,A
0007 F500    R      MOV    status+01H,A
                                           ; SOURCE LINE # 305 
0009 F500    R      MOV    new_data_count,A
                                           ; SOURCE LINE # 306 
000B 7900    R      MOV    R1,#data_count
000D 7707           MOV    @R1,#007H
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 307 
000F FB             MOV    R3,A
0010         ?FOR29:
                                           ; SOURCE LINE # 309 
0010 EB             MOV    A,R3
0011 2400    R      ADD    A,#ascii_frame+05H
0013 F8             MOV    R0,A
0014 EB             MOV    A,R3
0015 2400    R      ADD    A,#ascii
0017 F9             MOV    R1,A
0018 E6             MOV    A,@R0
0019 F7             MOV    @R1,A
                                           ; SOURCE LINE # 307 
001A 0B             INC    R3
001B BB04F2         CJNE   R3,#004H,?FOR29
                                           ; SOURCE LINE # 311 
001E 120000  R      LCALL  AsciiToTwoByte
0021 8E00    R      MOV    start,R6
0023 8F00    R      MOV    start+01H,R7
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 24

              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 312 
0025 E4             CLR    A
0026 FB             MOV    R3,A
0027         ?FOR30:
                                           ; SOURCE LINE # 314 
0027 EB             MOV    A,R3
0028 2400    R      ADD    A,#ascii_frame+09H
002A F8             MOV    R0,A
002B EB             MOV    A,R3
002C 2400    R      ADD    A,#ascii
002E F9             MOV    R1,A
002F E6             MOV    A,@R0
0030 F7             MOV    @R1,A
                                           ; SOURCE LINE # 312 
0031 0B             INC    R3
0032 BB04F2         CJNE   R3,#004H,?FOR30
                                           ; SOURCE LINE # 317 
0035 120000  R      LCALL  AsciiToTwoByte
0038 8E00    R      MOV    cant,R6
003A 8F00    R      MOV    cant+01H,R7
                                           ; SOURCE LINE # 318 
003C EF             MOV    A,R7
003D 2500    R      ADD    A,start+01H
003F F500    R      MOV    limit+01H,A
0041 E500    R      MOV    A,cant
0043 3500    R      ADDC   A,start
0045 F500    R      MOV    limit,A
                                           ; SOURCE LINE # 321 
0047 850000  R      MOV    i,start
004A 850000  R      MOV    i+01H,start+01H
004D         ?FOR31:
004D E500    R      MOV    A,i
004F B50005  R      CJNE   A,limit,?LAB264
0052 E500    R      MOV    A,i+01H
0054 B50000  R      CJNE   A,limit+01H,?LAB264
0057         ?LAB264:
0057 503E           JNC    ?NXT116
                                           ; SOURCE LINE # 323 
0059 AE00    R      MOV    R6,i
005B AF00    R      MOV    R7,i+01H
005D 120000  R      LCALL  _GetInputRegisterValue
0060 8E00    R      MOV    status,R6
0062 8F00    R      MOV    status+01H,R7
                                           ; SOURCE LINE # 325 
0064 AE00    R      MOV    R6,status
0066 AF00    R      MOV    R7,status+01H
0068 120000  R      LCALL  _TwoByteToAscii
                                           ; SOURCE LINE # 326 
006B 7900    R      MOV    R1,#data_count
006D E7             MOV    A,@R1
006E 07             INC    @R1
006F 2400    R      ADD    A,#ascii_frame
0071 F8             MOV    R0,A
0072 A600    R      MOV    @R0,ascii+03H
                                           ; SOURCE LINE # 327 
0074 E7             MOV    A,@R1
0075 07             INC    @R1
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 25

0076 2400    R      ADD    A,#ascii_frame
0078 F8             MOV    R0,A
0079 A600    R      MOV    @R0,ascii+02H
                                           ; SOURCE LINE # 328 
007B E7             MOV    A,@R1
007C 07             INC    @R1
007D 2400    R      ADD    A,#ascii_frame
007F F8             MOV    R0,A
0080 A600    R      MOV    @R0,ascii+01H
                                           ; SOURCE LINE # 329 
0082 E7             MOV    A,@R1
0083 07             INC    @R1
0084 2400    R      ADD    A,#ascii_frame
0086 F8             MOV    R0,A
0087 A600    R      MOV    @R0,ascii
                                           ; SOURCE LINE # 331 
0089 0500    R      INC    new_data_count
008B 0500    R      INC    new_data_count
                                           ; SOURCE LINE # 321 
008D 0500    R      INC    i+01H
008F E500    R      MOV    A,i+01H
0091 70BA           JNZ    ?FOR31
0093 0500    R      INC    i
0095 80B6           SJMP   ?FOR31
0097         ?NXT116:
                                           ; SOURCE LINE # 334 
0097 AF00    R      MOV    R7,new_data_count
0099 120000  R      LCALL  _ByteToAscii
                                           ; SOURCE LINE # 335 
009C 7900    R      MOV    R1,#ascii_frame+05H
009E A700    R      MOV    @R1,ascii
                                           ; SOURCE LINE # 336 
00A0 7900    R      MOV    R1,#ascii_frame+06H
00A2 A700    R      MOV    @R1,ascii+01H
                                           ; SOURCE LINE # 338 
00A4 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 340 
00A7 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponseReadInputRegisters_04 (END)

            ; FUNCTION ResponseForceSingleCoil_05 (BEGIN)
                                           ; SOURCE LINE # 345 
0000 E4             CLR    A
0001 F500    R      MOV    coilID,A
0003 F500    R      MOV    coilID+01H,A
                                           ; SOURCE LINE # 346 
0005 F500    R      MOV    value,A
0007 F500    R      MOV    value+01H,A
                                           ; SOURCE LINE # 347 
0009 F500    R      MOV    i,A
000B F500    R      MOV    i+01H,A
                                           ; SOURCE LINE # 348 
000D F500    R      MOV    i,A
000F F500    R      MOV    i+01H,A
0011         ?FOR36:
                                           ; SOURCE LINE # 350 
0011 E500    R      MOV    A,i+01H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 26

0013 2400    R      ADD    A,#ascii_frame+05H
0015 F8             MOV    R0,A
0016 E500    R      MOV    A,i+01H
0018 2400    R      ADD    A,#ascii
001A F9             MOV    R1,A
001B E6             MOV    A,@R0
001C F7             MOV    @R1,A
                                           ; SOURCE LINE # 348 
001D 0500    R      INC    i+01H
001F E500    R      MOV    A,i+01H
0021 B404ED         CJNE   A,#004H,?FOR36
                                           ; SOURCE LINE # 352 
0024 120000  R      LCALL  AsciiToTwoByte
0027 8E00    R      MOV    coilID,R6
0029 8F00    R      MOV    coilID+01H,R7
                                           ; SOURCE LINE # 353 
002B E4             CLR    A
002C F500    R      MOV    i,A
002E F500    R      MOV    i+01H,A
0030         ?FOR37:
                                           ; SOURCE LINE # 355 
0030 E500    R      MOV    A,i+01H
0032 2400    R      ADD    A,#ascii_frame+09H
0034 F8             MOV    R0,A
0035 E500    R      MOV    A,i+01H
0037 2400    R      ADD    A,#ascii
0039 F9             MOV    R1,A
003A E6             MOV    A,@R0
003B F7             MOV    @R1,A
                                           ; SOURCE LINE # 353 
003C 0500    R      INC    i+01H
003E E500    R      MOV    A,i+01H
0040 B404ED         CJNE   A,#004H,?FOR37
                                           ; SOURCE LINE # 357 
0043 120000  R      LCALL  AsciiToTwoByte
0046 8E00    R      MOV    value,R6
0048 8F00    R      MOV    value+01H,R7
                                           ; SOURCE LINE # 358 
004A E500    R      MOV    A,value
004C 4500    R      ORL    A,value+01H
004E 6014           JZ     ?LAB284
0050 E4             CLR    A
0051 FF             MOV    R7,A
0052 FD             MOV    R5,A
0053 FC             MOV    R4,A
0054 C0E0           PUSH   ACC
0056 C0E0           PUSH   ACC
0058 C000    R      PUSH   value
005A C000    R      PUSH   value+01H
005C 7EFF           MOV    R6,#0FFH
005E 120000  R      LCALL  ?C_CMPL
0061 BF0019         CJNE   R7,#000H,?ELSE48
0064         ?LAB284:
                                           ; SOURCE LINE # 360 
0064 AE00    R      MOV    R6,coilID
0066 AF00    R      MOV    R7,coilID+01H
0068 E500    R      MOV    A,value
006A B40006         CJNE   A,#000H,?LAB286
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 27

006D E500    R      MOV    A,value+01H
006F B40001         CJNE   A,#000H,?LAB286
0072 D3             SETB   C
0073         ?LAB286:
0073 E4             CLR    A
0074 4001           JC     ?LAB285
0076 04             INC    A
0077         ?LAB285:
0077 FD             MOV    R5,A
0078 120000  R      LCALL  _SetCoilValue
007B 8003           SJMP   ?NXT132
007D         ?ELSE48:
                                           ; SOURCE LINE # 364 
007D 020000  R      LJMP   clear_frame
0080         ?NXT132:
                                           ; SOURCE LINE # 368 
0080 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 370 
0083 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponseForceSingleCoil_05 (END)

            ; FUNCTION ResponsePresetSingleRegister_06 (BEGIN)
              ; R2R3 is assigned to registerID
              ; R4R5 is assigned to value
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 379 
0000 E4             CLR    A
0001 F500    R      MOV    i,A
0003 F500    R      MOV    i+01H,A
0005         ?FOR40:
                                           ; SOURCE LINE # 381 
0005 E500    R      MOV    A,i+01H
0007 2400    R      ADD    A,#ascii_frame+05H
0009 F8             MOV    R0,A
000A E500    R      MOV    A,i+01H
000C 2400    R      ADD    A,#ascii
000E F9             MOV    R1,A
000F E6             MOV    A,@R0
0010 F7             MOV    @R1,A
                                           ; SOURCE LINE # 379 
0011 0500    R      INC    i+01H
0013 E500    R      MOV    A,i+01H
0015 B404ED         CJNE   A,#004H,?FOR40
                                           ; SOURCE LINE # 383 
0018 120000  R      LCALL  AsciiToTwoByte
001B 8E00    R      MOV    registerID,R6
001D 8F00    R      MOV    registerID+01H,R7
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 384 
001F E4             CLR    A
0020 FB             MOV    R3,A
0021         ?FOR41:
                                           ; SOURCE LINE # 386 
0021 EB             MOV    A,R3
0022 2400    R      ADD    A,#ascii_frame+09H
0024 F8             MOV    R0,A
0025 EB             MOV    A,R3
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 28

0026 2400    R      ADD    A,#ascii
0028 F9             MOV    R1,A
0029 E6             MOV    A,@R0
002A F7             MOV    @R1,A
                                           ; SOURCE LINE # 384 
002B 0B             INC    R3
002C BB04F2         CJNE   R3,#004H,?FOR41
                                           ; SOURCE LINE # 388 
002F 120000  R      LCALL  AsciiToTwoByte
0032 8E00    R      MOV    value,R6
0034 8F00    R      MOV    value+01H,R7
                                           ; SOURCE LINE # 389 
0036 AE00    R      MOV    R6,registerID
0038 AF00    R      MOV    R7,registerID+01H
003A AC00    R      MOV    R4,value
003C AD00    R      MOV    R5,value+01H
003E 120000  R      LCALL  _SetHoldingRegisterValue
                                           ; SOURCE LINE # 391 
0041 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 393 
0044 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponsePresetSingleRegister_06 (END)

            ; FUNCTION ResponseForceMultipleCoils_15 (BEGIN)
              ; R2R3 is assigned to start
              ; R4R5 is assigned to cant
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 400 
0000 E4             CLR    A
0001 F500    R      MOV    limit,A
0003 F500    R      MOV    limit+01H,A
                                           ; SOURCE LINE # 401 
0005 F500    R      MOV    coils,A
0007 F500    R      MOV    k,A
0009 F500    R      MOV    new_data_count,A
000B F500    R      MOV    tempAdr,A
                                           ; SOURCE LINE # 402 
000D F500    R      MOV    index,A
000F F500    R      MOV    offset,A
                                           ; SOURCE LINE # 405 
0011 F500    R      MOV    i,A
0013 F500    R      MOV    i+01H,A
0015         ?FOR46:
                                           ; SOURCE LINE # 407 
0015 E500    R      MOV    A,i+01H
0017 2400    R      ADD    A,#ascii_frame+05H
0019 F8             MOV    R0,A
001A E500    R      MOV    A,i+01H
001C 2400    R      ADD    A,#ascii
001E F9             MOV    R1,A
001F E6             MOV    A,@R0
0020 F7             MOV    @R1,A
                                           ; SOURCE LINE # 405 
0021 0500    R      INC    i+01H
0023 E500    R      MOV    A,i+01H
0025 B404ED         CJNE   A,#004H,?FOR46
                                           ; SOURCE LINE # 409 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 29

0028 120000  R      LCALL  AsciiToTwoByte
002B 8E00    R      MOV    start,R6
002D 8F00    R      MOV    start+01H,R7
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 410 
002F E4             CLR    A
0030 FB             MOV    R3,A
0031         ?FOR47:
                                           ; SOURCE LINE # 412 
0031 EB             MOV    A,R3
0032 2400    R      ADD    A,#ascii_frame+09H
0034 F8             MOV    R0,A
0035 EB             MOV    A,R3
0036 2400    R      ADD    A,#ascii
0038 F9             MOV    R1,A
0039 E6             MOV    A,@R0
003A F7             MOV    @R1,A
                                           ; SOURCE LINE # 410 
003B 0B             INC    R3
003C BB04F2         CJNE   R3,#004H,?FOR47
                                           ; SOURCE LINE # 414 
003F 120000  R      LCALL  AsciiToTwoByte
0042 8E00    R      MOV    cant,R6
0044 8F00    R      MOV    cant+01H,R7
                                           ; SOURCE LINE # 415 
0046 EF             MOV    A,R7
0047 2500    R      ADD    A,start+01H
0049 F500    R      MOV    limit+01H,A
004B E500    R      MOV    A,cant
004D 3500    R      ADDC   A,start
004F F500    R      MOV    limit,A
                                           ; SOURCE LINE # 417 
0051 7900    R      MOV    R1,#ascii_frame+0DH
0053 8707           MOV    AR7,@R1
0055 7900    R      MOV    R1,#ascii_frame+0EH
0057 8705           MOV    AR5,@R1
0059 120000  R      LCALL  _AsciiToByte
005C 8F00    R      MOV    new_data_count,R7
                                           ; SOURCE LINE # 418 
005E 7900    R      MOV    R1,#data_count
0060 770F           MOV    @R1,#00FH
                                           ; SOURCE LINE # 421 
0062 7900    R      MOV    R1,#byte_count
0064 7700           MOV    @R1,#000H
                                           ; SOURCE LINE # 422 
0066 E4             CLR    A
0067 F500    R      MOV    i,A
0069 F500    R      MOV    i+01H,A
006B         ?FOR48:
006B E500    R      MOV    A,i
006D B40005         CJNE   A,#000H,?LAB312
0070 E500    R      MOV    A,i+01H
0072 B50000  R      CJNE   A,new_data_count,?LAB312
0075         ?LAB312:
0075 502F           JNC    ?NXT153
                                           ; SOURCE LINE # 424 
0077 7900    R      MOV    R1,#data_count
0079 E7             MOV    A,@R1
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 30

007A 2400    R      ADD    A,#ascii_frame
007C F8             MOV    R0,A
007D 8607           MOV    AR7,@R0
007F E7             MOV    A,@R1
0080 2400    R      ADD    A,#ascii_frame+01H
0082 F8             MOV    R0,A
0083 8605           MOV    AR5,@R0
0085 120000  R      LCALL  _AsciiToByte
0088 8F00    R      MOV    coils,R7
                                           ; SOURCE LINE # 425 
008A E7             MOV    A,@R1
008B 2402           ADD    A,#002H
008D F7             MOV    @R1,A
                                           ; SOURCE LINE # 426 
008E 7900    R      MOV    R1,#byte_count
0090 E7             MOV    A,@R1
0091 07             INC    @R1
0092 25E0           ADD    A,ACC
0094 2400    R      ADD    A,#parameters
0096 F8             MOV    R0,A
0097 7600           MOV    @R0,#000H
0099 08             INC    R0
009A A600    R      MOV    @R0,coils
                                           ; SOURCE LINE # 422 
009C 0500    R      INC    i+01H
009E E500    R      MOV    A,i+01H
00A0 70C9           JNZ    ?FOR48
00A2 0500    R      INC    i
00A4 80C5           SJMP   ?FOR48
00A6         ?NXT153:
                                           ; SOURCE LINE # 430 
00A6 850000  R      MOV    i,start
00A9 850000  R      MOV    i+01H,start+01H
00AC         ?FOR49:
00AC E500    R      MOV    A,i
00AE B50005  R      CJNE   A,limit,?LAB315
00B1 E500    R      MOV    A,i+01H
00B3 B50000  R      CJNE   A,limit+01H,?LAB315
00B6         ?LAB315:
00B6 5049           JNC    ?NXT155
                                           ; SOURCE LINE # 432 
00B8 E500    R      MOV    A,i+01H
00BA C3             CLR    C
00BB 9500    R      SUBB   A,start+01H
00BD F500    R      MOV    tempAdr,A
                                           ; SOURCE LINE # 433 
00BF 75F008         MOV    B,#008H
00C2 E500    R      MOV    A,tempAdr
00C4 84             DIV    AB
00C5 F500    R      MOV    index,A
                                           ; SOURCE LINE # 434 
00C7 E500    R      MOV    A,tempAdr
00C9 5407           ANL    A,#007H
00CB F500    R      MOV    offset,A
                                           ; SOURCE LINE # 435 
00CD 7401           MOV    A,#001H
00CF AA00    R      MOV    R2,offset
00D1 0A             INC    R2
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 31

00D2 8002           SJMP   ?LAB317
00D4         ?LAB318:
00D4 C3             CLR    C
00D5 33             RLC    A
00D6         ?LAB317:
00D6 DAFC           DJNZ   R2,?LAB318
00D8 FE             MOV    R6,A
00D9 E500    R      MOV    A,index
00DB 2500    R      ADD    A,index
00DD 2400    R      ADD    A,#parameters
00DF F9             MOV    R1,A
00E0 09             INC    R1
00E1 EE             MOV    A,R6
00E2 57             ANL    A,@R1
00E3 F500    R      MOV    k,A
                                           ; SOURCE LINE # 436 
00E5 AE00    R      MOV    R6,i
00E7 AF00    R      MOV    R7,i+01H
00E9 E500    R      MOV    A,k
00EB B40001         CJNE   A,#000H,?LAB320
00EE D3             SETB   C
00EF         ?LAB320:
00EF E4             CLR    A
00F0 4001           JC     ?LAB319
00F2 04             INC    A
00F3         ?LAB319:
00F3 FD             MOV    R5,A
00F4 120000  R      LCALL  _SetCoilValue
                                           ; SOURCE LINE # 430 
00F7 0500    R      INC    i+01H
00F9 E500    R      MOV    A,i+01H
00FB 70AF           JNZ    ?FOR49
00FD 0500    R      INC    i
00FF 80AB           SJMP   ?FOR49
0101         ?NXT155:
                                           ; SOURCE LINE # 439 
0101 7900    R      MOV    R1,#data_count
0103 770D           MOV    @R1,#00DH
                                           ; SOURCE LINE # 441 
0105 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 443 
0108 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponseForceMultipleCoils_15 (END)

            ; FUNCTION ResponsePresetMultipleRegisters_16 (BEGIN)
              ; R2R3 is assigned to start
              ; R4R5 is assigned to cant
              ; R6R7 is assigned to i
                                           ; SOURCE LINE # 450 
0000 E4             CLR    A
0001 F500    R      MOV    limit,A
0003 F500    R      MOV    limit+01H,A
0005 F500    R      MOV    reg_value,A
0007 F500    R      MOV    reg_value+01H,A
                                           ; SOURCE LINE # 451 
0009 F500    R      MOV    j,A
                                           ; SOURCE LINE # 453 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 32

000B F500    R      MOV    i,A
000D F500    R      MOV    i+01H,A
000F         ?FOR54:
                                           ; SOURCE LINE # 455 
000F E500    R      MOV    A,i+01H
0011 2400    R      ADD    A,#ascii_frame+05H
0013 F8             MOV    R0,A
0014 E500    R      MOV    A,i+01H
0016 2400    R      ADD    A,#ascii
0018 F9             MOV    R1,A
0019 E6             MOV    A,@R0
001A F7             MOV    @R1,A
                                           ; SOURCE LINE # 453 
001B 0500    R      INC    i+01H
001D E500    R      MOV    A,i+01H
001F B404ED         CJNE   A,#004H,?FOR54
                                           ; SOURCE LINE # 457 
0022 120000  R      LCALL  AsciiToTwoByte
0025 8E00    R      MOV    start,R6
0027 8F00    R      MOV    start+01H,R7
              ; R2R3 is assigned to i
                                           ; SOURCE LINE # 458 
0029 E4             CLR    A
002A FB             MOV    R3,A
002B         ?FOR55:
                                           ; SOURCE LINE # 460 
002B EB             MOV    A,R3
002C 2400    R      ADD    A,#ascii_frame+09H
002E F8             MOV    R0,A
002F EB             MOV    A,R3
0030 2400    R      ADD    A,#ascii
0032 F9             MOV    R1,A
0033 E6             MOV    A,@R0
0034 F7             MOV    @R1,A
                                           ; SOURCE LINE # 458 
0035 0B             INC    R3
0036 BB04F2         CJNE   R3,#004H,?FOR55
                                           ; SOURCE LINE # 462 
0039 120000  R      LCALL  AsciiToTwoByte
003C 8E00    R      MOV    cant,R6
003E 8F00    R      MOV    cant+01H,R7
              ; R4R5 is assigned to limit
                                           ; SOURCE LINE # 465 
0040 7900    R      MOV    R1,#ascii_frame+0DH
0042 8707           MOV    AR7,@R1
0044 7900    R      MOV    R1,#ascii_frame+0EH
0046 8705           MOV    AR5,@R1
0048 120000  R      LCALL  _AsciiToByte
004B 7900    R      MOV    R1,#byte_count
004D A707           MOV    @R1,AR7
                                           ; SOURCE LINE # 466 
004F 7900    R      MOV    R1,#data_count
0051 770F           MOV    @R1,#00FH
                                           ; SOURCE LINE # 469 
0053 75F002         MOV    B,#002H
0056 7900    R      MOV    R1,#byte_count
0058 E7             MOV    A,@R1
0059 84             DIV    AB
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 33

005A F7             MOV    @R1,A
                                           ; SOURCE LINE # 470 
005B E4             CLR    A
005C F500    R      MOV    i,A
005E F500    R      MOV    i+01H,A
0060         ?FOR56:
0060 7900    R      MOV    R1,#byte_count
0062 E7             MOV    A,@R1
0063 FB             MOV    R3,A
0064 E500    R      MOV    A,i
0066 B40005         CJNE   A,#000H,?LAB335
0069 E500    R      MOV    A,i+01H
006B B50300         CJNE   A,AR3,?LAB335
006E         ?LAB335:
006E 5048           JNC    ?NXT169
                                           ; SOURCE LINE # 472 
0070 750000  R      MOV    j,#000H
0073         ?FOR57:
                                           ; SOURCE LINE # 474 
0073 7900    R      MOV    R1,#data_count
0075 8702           MOV    AR2,@R1
0077 07             INC    @R1
0078 EA             MOV    A,R2
0079 2400    R      ADD    A,#ascii_frame
007B F8             MOV    R0,A
007C E500    R      MOV    A,j
007E 2400    R      ADD    A,#ascii
0080 F9             MOV    R1,A
0081 E6             MOV    A,@R0
0082 F7             MOV    @R1,A
                                           ; SOURCE LINE # 472 
0083 0500    R      INC    j
0085 E500    R      MOV    A,j
0087 33             RLC    A
0088 95E0           SUBB   A,ACC
008A FC             MOV    R4,A
008B E500    R      MOV    A,j
008D 6404           XRL    A,#004H
008F 4C             ORL    A,R4
0090 70E1           JNZ    ?FOR57
                                           ; SOURCE LINE # 476 
0092 120000  R      LCALL  AsciiToTwoByte
0095 8E00    R      MOV    reg_value,R6
0097 8F00    R      MOV    reg_value+01H,R7
                                           ; SOURCE LINE # 477 
0099 AB00    R      MOV    R3,start+01H
009B 0500    R      INC    start+01H
009D E500    R      MOV    A,start+01H
009F 7002           JNZ    ?LAB337
00A1 0500    R      INC    start
00A3         ?LAB337:
00A3 EB             MOV    A,R3
00A4 C3             CLR    C
00A5 33             RLC    A
00A6 2400    R      ADD    A,#holding_registers_array
00A8 F8             MOV    R0,A
00A9 A600    R      MOV    @R0,reg_value
00AB 08             INC    R0
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 34

00AC A600    R      MOV    @R0,reg_value+01H
                                           ; SOURCE LINE # 470 
00AE 0500    R      INC    i+01H
00B0 E500    R      MOV    A,i+01H
00B2 70AC           JNZ    ?FOR56
00B4 0500    R      INC    i
00B6 80A8           SJMP   ?FOR56
00B8         ?NXT169:
                                           ; SOURCE LINE # 480 
00B8 7900    R      MOV    R1,#data_count
00BA 770D           MOV    @R1,#00DH
                                           ; SOURCE LINE # 482 
00BC 120000  R      LCALL  gen_lrc
                                           ; SOURCE LINE # 484 
00BF 020000  R      LJMP   tx_assci_frame

            ; FUNCTION ResponsePresetMultipleRegisters_16 (END)

            ; FUNCTION Serial_PWM_Init (BEGIN)
                                           ; SOURCE LINE # 25 
0000 C2B2           CLR    RS485En
                                           ; SOURCE LINE # 27 
0002 758921         MOV    TMOD,#021H
                                           ; SOURCE LINE # 29 
0005 758DF4         MOV    TH1,#0F4H
                                           ; SOURCE LINE # 30 
0008 758BF4         MOV    TL1,#0F4H
                                           ; SOURCE LINE # 32 
000B 758CF7         MOV    TH0,#0F7H
                                           ; SOURCE LINE # 33 
000E 758A86         MOV    TL0,#086H
                                           ; SOURCE LINE # 35 
0011 E4             CLR    A
0012 FE             MOV    R6,A
0013 7F01           MOV    R7,#001H
0015 FC             MOV    R4,A
0016 7D01           MOV    R5,#001H
0018 120000  R      LCALL  _SetHoldingRegisterValue
                                           ; SOURCE LINE # 36 
001B E4             CLR    A
001C F500    R      MOV    level,A
001E 750005  R      MOV    level+01H,#005H
                                           ; SOURCE LINE # 38 
0021 D2A9           SETB   ET0
                                           ; SOURCE LINE # 39 
0023 D28C           SETB   TR0
                                           ; SOURCE LINE # 41 
0025 759850         MOV    SCON,#050H
                                           ; SOURCE LINE # 43 
0028 D2AC           SETB   ES
                                           ; SOURCE LINE # 44 
002A D2BC           SETB   PS
                                           ; SOURCE LINE # 45 
002C D2BB           SETB   PT1
                                           ; SOURCE LINE # 47 
002E D28E           SETB   TR1
                                           ; SOURCE LINE # 48 
0030 22             RET    
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 36


            ; FUNCTION Serial_PWM_Init (END)

            ; FUNCTION make_hash (BEGIN)
                                           ; SOURCE LINE # 52 
0000 E4             CLR    A
0001 F500    R      MOV    h,A
0003 F500    R      MOV    h+01H,A
                                           ; SOURCE LINE # 53 
0005 F500    R      MOV    i,A
0007 F500    R      MOV    i+01H,A
0009         ?FOR59:
0009 7900    R      MOV    R1,#data_count
000B E7             MOV    A,@R1
000C FB             MOV    R3,A
000D E500    R      MOV    A,i
000F 6480           XRL    A,#080H
0011 B48005         CJNE   A,#080H,?LAB346
0014 E500    R      MOV    A,i+01H
0016 B50300         CJNE   A,AR3,?LAB346
0019         ?LAB346:
0019 5029           JNC    ?NXT175
                                           ; SOURCE LINE # 54 
001B E500    R      MOV    A,i+01H
001D 2401           ADD    A,#001H
001F FF             MOV    R7,A
0020 E4             CLR    A
0021 3500    R      ADDC   A,i
0023 FE             MOV    R6,A
0024 E500    R      MOV    A,i+01H
0026 2400    R      ADD    A,#ascii_frame
0028 F8             MOV    R0,A
0029 E6             MOV    A,@R0
002A FD             MOV    R5,A
002B 7C00           MOV    R4,#000H
002D 120000  R      LCALL  ?C_IMUL
0030 E500    R      MOV    A,h+01H
0032 2F             ADD    A,R7
0033 F500    R      MOV    h+01H,A
0035 E500    R      MOV    A,h
0037 3E             ADDC   A,R6
0038 F500    R      MOV    h,A
                                           ; SOURCE LINE # 53 
003A 0500    R      INC    i+01H
003C E500    R      MOV    A,i+01H
003E 70C9           JNZ    ?FOR59
0040 0500    R      INC    i
0042 80C5           SJMP   ?FOR59
0044         ?NXT175:
                                           ; SOURCE LINE # 56 
0044 AE00    R      MOV    R6,h
0046 AF00    R      MOV    R7,h+01H
0048 E4             CLR    A
0049 FC             MOV    R4,A
004A 7D13           MOV    R5,#013H
004C 120000  R      LCALL  ?C_IMUL
004F 7C03           MOV    R4,#003H
0051 7DF1           MOV    R5,#0F1H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 37

0053 120000  R      LCALL  ?C_SIDIV
0056 8C06           MOV    AR6,R4
0058 8D07           MOV    AR7,R5
                                           ; SOURCE LINE # 57 
005A 22             RET    

            ; FUNCTION make_hash (END)

            ; FUNCTION _delay_ms (BEGIN)
              ; Register R6R7 is assigned to parameter d
              ; R4R5 is assigned to k
                                           ; SOURCE LINE # 62 
0000 E4             CLR    A
0001 F500    R      MOV    s,A
0003 F500    R      MOV    s+01H,A
                                           ; SOURCE LINE # 63 
0005 F500    R      MOV    k,A
0007 F500    R      MOV    k+01H,A
0009         ?FOR61:
0009 E500    R      MOV    A,k
000B B50605         CJNE   A,AR6,?LAB355
000E E500    R      MOV    A,k+01H
0010 B50700         CJNE   A,AR7,?LAB355
0013         ?LAB355:
0013 5012           JNC    ?NXT179
                                           ; SOURCE LINE # 65 
0015 0500    R      INC    s+01H
0017 E500    R      MOV    A,s+01H
0019 7002           JNZ    ?NXT180
001B 0500    R      INC    s
001D         ?NXT180:
                                           ; SOURCE LINE # 63 
001D 0500    R      INC    k+01H
001F E500    R      MOV    A,k+01H
0021 70E6           JNZ    ?FOR61
0023 0500    R      INC    k
0025 80E2           SJMP   ?FOR61
0027         ?NXT179:
                                           ; SOURCE LINE # 67 
0027 22             RET    

            ; FUNCTION _delay_ms (END)

            ; FUNCTION PWM (BEGIN)
                                           ; SOURCE LINE # 69 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C0D0           PUSH   PSW
0006 C000           PUSH   AR0
0008 C002           PUSH   AR2
000A C003           PUSH   AR3
000C C004           PUSH   AR4
000E C005           PUSH   AR5
0010 C006           PUSH   AR6
0012 C007           PUSH   AR7
              ; R4R5 is assigned to off
                                           ; SOURCE LINE # 72 
0014 E4             CLR    A
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 39

0015 FE             MOV    R6,A
0016 FF             MOV    R7,A
0017 120000  R      LCALL  _GetCoilValue
001A 7C00           MOV    R4,#000H
001C 8F05           MOV    AR5,R7
                                           ; SOURCE LINE # 74 
001E 758CF7         MOV    TH0,#0F7H
                                           ; SOURCE LINE # 75 
0021 758A86         MOV    TL0,#086H
                                           ; SOURCE LINE # 77 
0024 E500    R      MOV    A,cant
0026 6480           XRL    A,#080H
0028 B48006         CJNE   A,#080H,?LAB367
002B E500    R      MOV    A,cant+01H
002D B40001         CJNE   A,#000H,?LAB367
0030 D3             SETB   C
0031         ?LAB367:
0031 5004           JNC    ?ELSE52
                                           ; SOURCE LINE # 79 
0033 D2B7           SETB   EN_D
0035 800B           SJMP   ?NXT185
0037         ?ELSE52:
                                           ; SOURCE LINE # 83 
0037 ED             MOV    A,R5
0038 FB             MOV    R3,A
0039 EC             MOV    A,R4
003A FE             MOV    R6,A
003B EE             MOV    A,R6
003C 4B             ORL    A,R3
003D 24FF           ADD    A,#0FFH
003F B3             CPL    C
0040 92B7           MOV    EN_D,C
0042         ?NXT185:
                                           ; SOURCE LINE # 86 
0042 8500F0  R      MOV    B,level
0045 B2F7           CPL    B.7
0047 E500    R      MOV    A,cant
0049 6480           XRL    A,#080H
004B B5F005         CJNE   A,B,?LAB369
004E E500    R      MOV    A,cant+01H
0050 B50000  R      CJNE   A,level+01H,?LAB369
0053         ?LAB369:
0053 400C           JC     ?NXT186
                                           ; SOURCE LINE # 88 
0055 E500    R      MOV    A,level+01H
0057 24FB           ADD    A,#0FBH
0059 F500    R      MOV    cant+01H,A
005B E500    R      MOV    A,level
005D 34FF           ADDC   A,#0FFH
005F F500    R      MOV    cant,A
0061         ?NXT186:
                                           ; SOURCE LINE # 91 
0061 0500    R      INC    cant+01H
0063 E500    R      MOV    A,cant+01H
0065 7002           JNZ    ?LAB371
0067 0500    R      INC    cant
0069         ?LAB371:
                                           ; SOURCE LINE # 93 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 40

0069 0500    R      INC    led_count+01H
006B E500    R      MOV    A,led_count+01H
006D 7002           JNZ    ?LAB372
006F 0500    R      INC    led_count
0071         ?LAB372:
                                           ; SOURCE LINE # 94 
0071 E500    R      MOV    A,led_count
0073 B4010C         CJNE   A,#001H,?NXT187
0076 E500    R      MOV    A,led_count+01H
0078 B4F407         CJNE   A,#0F4H,?NXT187
                                           ; SOURCE LINE # 96 
007B E4             CLR    A
007C F500    R      MOV    led_count,A
007E F500    R      MOV    led_count+01H,A
                                           ; SOURCE LINE # 97 
0080 B293           CPL    LED1
0082         ?NXT187:
                                           ; SOURCE LINE # 109 
0082 C28D           CLR    TF0
                                           ; SOURCE LINE # 110 
0084 D28C           SETB   TR0
0086 D007           POP    AR7
0088 D006           POP    AR6
008A D005           POP    AR5
008C D004           POP    AR4
008E D003           POP    AR3
0090 D002           POP    AR2
0092 D000           POP    AR0
0094 D0D0           POP    PSW
0096 D0F0           POP    B
0098 D0E0           POP    ACC
                                           ; SOURCE LINE # 111 
009A 32             RETI   

            ; FUNCTION PWM (END)

            ; FUNCTION SerialPortInt (BEGIN)
                                           ; SOURCE LINE # 113 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C083           PUSH   DPH
0006 C082           PUSH   DPL
0008 C0D0           PUSH   PSW
000A C000           PUSH   AR0
000C C001           PUSH   AR1
000E C002           PUSH   AR2
0010 C003           PUSH   AR3
0012 C004           PUSH   AR4
0014 C005           PUSH   AR5
0016 C006           PUSH   AR6
0018 C007           PUSH   AR7
                                           ; SOURCE LINE # 115 
001A 750000  R      MOV    rx,#000H
                                           ; SOURCE LINE # 117 
001D 30993E         JNB    TI,?ELSE66
                                           ; SOURCE LINE # 119 
0020 C299           CLR    TI
                                           ; SOURCE LINE # 120 
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 42

0022 20B21B         JB     RS485En,?NXT202
0025         ?NXT203:
                                           ; SOURCE LINE # 177 
0025 D007           POP    AR7
0027 D006           POP    AR6
0029 D005           POP    AR5
002B D004           POP    AR4
002D D003           POP    AR3
002F D002           POP    AR2
0031 D001           POP    AR1
0033 D000           POP    AR0
0035 D0D0           POP    PSW
0037 D082           POP    DPL
0039 D083           POP    DPH
003B D0F0           POP    B
003D D0E0           POP    ACC
                                           ; SOURCE LINE # 179 
003F 32             RETI   
0040         ?NXT202:
                                           ; SOURCE LINE # 125 
0040 7900    R      MOV    R1,#data_count
0042 87F0           MOV    B,@R1
0044 7800    R      MOV    R0,#send_count
0046 E6             MOV    A,@R0
0047 B5F000         CJNE   A,B,?LAB384
004A         ?LAB384:
004A 500B           JNC    ?ELSE68
                                           ; SOURCE LINE # 127 
004C C29B           CLR    TB8
                                           ; SOURCE LINE # 128 
004E E6             MOV    A,@R0
004F 2400    R      ADD    A,#ascii_frame
0051 F9             MOV    R1,A
0052 8799           MOV    SBUF,@R1
                                           ; SOURCE LINE # 129 
0054 06             INC    @R0
0055 8066           SJMP   ?NXT201
0057         ?ELSE68:
                                           ; SOURCE LINE # 133 
0057 C2B2           CLR    RS485En
                                           ; SOURCE LINE # 134 
0059 120000  R      LCALL  clear_frame
005C 80C7           SJMP   ?NXT203
005E         ?ELSE66:
                                           ; SOURCE LINE # 139 
005E 3098C4         JNB    RI,?NXT203
                                           ; SOURCE LINE # 142 
0061 20B257         JB     RS485En,?ELSE70
0064 E500    R      MOV    A,BUSY
0066 B40152         CJNE   A,#001H,?ELSE70
                                           ; SOURCE LINE # 144 
0069 859900  R      MOV    rx,SBUF
                                           ; SOURCE LINE # 145 
006C C298           CLR    RI
                                           ; SOURCE LINE # 146 
006E E500    R      MOV    A,rx
0070 7002           JNZ    ?NXT207
0072 80B1           SJMP   ?NXT203
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 43

0074         ?NXT207:
                                           ; SOURCE LINE # 148 
0074 7900    R      MOV    R1,#data_count
0076 E7             MOV    A,@R1
0077 700E           JNZ    ?ELSE72
                                           ; SOURCE LINE # 150 
0079 E500    R      MOV    A,rx
007B B43A3A         CJNE   A,#03AH,?NXT208
                                           ; SOURCE LINE # 152 
007E E7             MOV    A,@R1
007F 07             INC    @R1
0080 2400    R      ADD    A,#ascii_frame
0082 F8             MOV    R0,A
0083 A600    R      MOV    @R0,rx
0085 8036           SJMP   ?NXT206
0087         ?ELSE72:
                                           ; SOURCE LINE # 157 
0087 7900    R      MOV    R1,#data_count
0089 8706           MOV    AR6,@R1
008B 07             INC    @R1
008C EE             MOV    A,R6
008D 2400    R      ADD    A,#ascii_frame
008F F8             MOV    R0,A
0090 A600    R      MOV    @R0,rx
                                           ; SOURCE LINE # 159 
0092 8706           MOV    AR6,@R1
0094 B70900         CJNE   @R1,#009H,?LAB388
0097         ?LAB388:
0097 4017           JC     ?NXT210
                                           ; SOURCE LINE # 161 
0099 EE             MOV    A,R6
009A 2400    R      ADD    A,#ascii_frame+0FFH
009C F8             MOV    R0,A
009D B60A10         CJNE   @R0,#00AH,?NXT210
00A0 EE             MOV    A,R6
00A1 2400    R      ADD    A,#ascii_frame+0FEH
00A3 F9             MOV    R1,A
00A4 B70D09         CJNE   @R1,#00DH,?NXT210
                                           ; SOURCE LINE # 163 
00A7 E4             CLR    A
00A8 F500    R      MOV    BUSY,A
                                           ; SOURCE LINE # 165 
00AA 120000  R      LCALL  execute_modbus_command
                                           ; SOURCE LINE # 167 
00AD 750001  R      MOV    BUSY,#001H
00B0         ?NXT210:
                                           ; SOURCE LINE # 170 
00B0 7900    R      MOV    R1,#data_count
00B2 B73C08         CJNE   @R1,#03CH,?NXT206
                                           ; SOURCE LINE # 172 
00B5 120000  R      LCALL  clear_frame
00B8         ?NXT208:
00B8 020000  R      LJMP   ?NXT203
00BB         ?ELSE70:
                                           ; SOURCE LINE # 177 
00BB C298           CLR    RI
00BD         ?NXT206:

RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 44

00BD         ?NXT201:
00BD 020000  R      LJMP   ?NXT203

            ; FUNCTION SerialPortInt (END)

            ; FUNCTION update_display (BEGIN)
                                           ; SOURCE LINE # 183 
0000 E4             CLR    A
0001 FE             MOV    R6,A
0002 FF             MOV    R7,A
0003 120000  R      LCALL  _GetHoldingRegisterValue
0006 8E00    R      MOV    x,R6
0008 8F00    R      MOV    x+01H,R7
                                           ; SOURCE LINE # 184 
000A E4             CLR    A
000B FE             MOV    R6,A
000C 7F01           MOV    R7,#001H
000E 120000  R      LCALL  _GetHoldingRegisterValue
0011 8E00    R      MOV    L,R6
0013 8F00    R      MOV    L+01H,R7
                                           ; SOURCE LINE # 186 
0015 E500    R      MOV    A,x
0017 20E718         JB     ACC.7,?ELSE80
001A 6480           XRL    A,#080H
001C B48006         CJNE   A,#080H,?LAB402
001F E500    R      MOV    A,x+01H
0021 B40901         CJNE   A,#009H,?LAB402
0024 D3             SETB   C
0025         ?LAB402:
0025 500B           JNC    ?ELSE80
                                           ; SOURCE LINE # 188 
0027 E500    R      MOV    A,x+01H
0029 2400    R      ADD    A,#_7seg
002B F8             MOV    R0,A
002C 86A0           MOV    P2,@R0
                                           ; SOURCE LINE # 189 
002E C2A0           CLR    ONE
0030 8026           SJMP   ?NXT216
0032         ?ELSE80:
                                           ; SOURCE LINE # 193 
0032 E500    R      MOV    A,x
0034 6480           XRL    A,#080H
0036 B48005         CJNE   A,#080H,?LAB404
0039 E500    R      MOV    A,x+01H
003B B41400         CJNE   A,#014H,?LAB404
003E         ?LAB404:
003E 5018           JNC    ?NXT216
                                           ; SOURCE LINE # 195 
0040 AE00    R      MOV    R6,x
0042 AF00    R      MOV    R7,x+01H
0044 E4             CLR    A
0045 FC             MOV    R4,A
0046 7D0A           MOV    R5,#00AH
0048 120000  R      LCALL  ?C_SIDIV
004B 8C00    R      MOV    x,R4
004D 8D00    R      MOV    x+01H,R5
                                           ; SOURCE LINE # 196 
004F E500    R      MOV    A,x+01H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 46

0051 2400    R      ADD    A,#_7seg
0053 F8             MOV    R0,A
0054 86A0           MOV    P2,@R0
                                           ; SOURCE LINE # 197 
0056 D2A0           SETB   ONE
0058         ?NXT216:
                                           ; SOURCE LINE # 201 
0058 E500    R      MOV    A,L
005A 20E713         JB     ACC.7,?NXT218
005D 6480           XRL    A,#080H
005F B48006         CJNE   A,#080H,?LAB407
0062 E500    R      MOV    A,L+01H
0064 B40501         CJNE   A,#005H,?LAB407
0067 D3             SETB   C
0068         ?LAB407:
0068 5006           JNC    ?NXT218
                                           ; SOURCE LINE # 202 
006A 850000  R      MOV    level,L
006D 850000  R      MOV    level+01H,L+01H
0070         ?NXT218:
                                           ; SOURCE LINE # 203 
0070 22             RET    

            ; FUNCTION update_display (END)

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 207 
0000 120000  R      LCALL  Serial_PWM_Init
                                           ; SOURCE LINE # 209 
0003 E4             CLR    A
0004 FE             MOV    R6,A
0005 FF             MOV    R7,A
0006 7D01           MOV    R5,#001H
0008 120000  R      LCALL  _SetCoilValue
                                           ; SOURCE LINE # 210 
000B E4             CLR    A
000C FC             MOV    R4,A
000D FE             MOV    R6,A
000E FF             MOV    R7,A
000F 120000  R      LCALL  _SetHoldingRegisterValue
                                           ; SOURCE LINE # 212 
0012 D2B7           SETB   EN_D
                                           ; SOURCE LINE # 213 
0014 D293           SETB   LED1
                                           ; SOURCE LINE # 214 
0016 C2B2           CLR    RS485En
                                           ; SOURCE LINE # 215 
0018 750001  R      MOV    BUSY,#001H
                                           ; SOURCE LINE # 217 
001B 120000  R      LCALL  clear_frame
                                           ; SOURCE LINE # 219 
001E D2AF           SETB   EA
0020         ?WHILE7:
                                           ; SOURCE LINE # 223 
0020 120000  R      LCALL  update_display
                                           ; SOURCE LINE # 224 
0023 7E03           MOV    R6,#003H
0025 7FE8           MOV    R7,#0E8H
RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 47

0027 120000  R      LCALL  _delay_ms
002A 80F4           SJMP   ?WHILE7

            ; FUNCTION main (END)

RC51 COMPILER V03.08.10.309,  MAIN               06/23/15  22:20:55  PAGE 49



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2976    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21     125
   IDATA SIZE       =     82      42
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.

RC51 COMPILATION COMPLETE. 10 WARNINGS,  0 ERROR
